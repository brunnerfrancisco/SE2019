
Actividad 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002f2  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800102  00800102  00000388  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000880  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068e  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036f  00000000  00000000  00001326  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001698  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000417  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b0  00000000  00000000  00001ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001c83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int cuarto_caso = 1;

int main()
{
	//Inicializar el pin del pulsador como entrada
	DDRD &= ~(1<<DDD2);
  a6:	52 98       	cbi	0x0a, 2	; 10
	//Inicializar el pin del led como salida
	DDRB |= (1<<DDB5);
  a8:	25 9a       	sbi	0x04, 5	; 4
				//El pulso es válido, se implementa la lógica del sistema

				//Si no está presionado el pulsador (se detectó un keyup)...
				if (!buttonStateAux)
				{
					buttonState = (buttonState + 1) % 6;
  aa:	e6 e0       	ldi	r30, 0x06	; 6
  ac:	f0 e0       	ldi	r31, 0x00	; 0
				}
			break;
			case 2:
				if(counterDelay>=50)
				{
					PORTB ^= (1<<PB5); //Se modifica el estado del led (toggle vía XOR)
  ae:	40 e2       	ldi	r20, 0x20	; 32
			}else{
				if(counterDelay>=100)
				{
					PORTB |= (1<<PB5);	//Enciende el Led
					counterDelay = 0;
					cuarto_caso = 1;
  b0:	c1 e0       	ldi	r28, 0x01	; 1
  b2:	d0 e0       	ldi	r29, 0x00	; 0
	DDRB |= (1<<DDB5);

	while (1)
	{
		//Leer el estado del pulsador
		buttonStateAux = PIND & (1<<PD2);
  b4:	89 b1       	in	r24, 0x09	; 9
  b6:	84 70       	andi	r24, 0x04	; 4
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <buttonStateAux+0x1>
  be:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <buttonStateAux>

		//Si cambió el estado del pulsador...
		if (buttonStateAux != pinValue)
  c2:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <pinValue>
  c6:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <pinValue+0x1>
  ca:	82 17       	cp	r24, r18
  cc:	93 07       	cpc	r25, r19
  ce:	51 f1       	breq	.+84     	; 0x124 <main+0x7e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	80 e7       	ldi	r24, 0x70	; 112
  d4:	92 e0       	ldi	r25, 0x02	; 2
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x30>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x3a>
  e0:	00 00       	nop
		{
			//Se espera un tiempo para evitar leer el ruido del rebote del pulsador
			_delay_ms(50);

			//Se vuelve a leer el estado del pulsador
			buttonStateAux = PIND & (1<<PD2);
  e2:	29 b1       	in	r18, 0x09	; 9
  e4:	24 70       	andi	r18, 0x04	; 4
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <buttonStateAux+0x1>
  ec:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <buttonStateAux>

			//Si el cambio se mantiene, se interpreta como evento de keydown/keyup válido
			if (buttonStateAux != pinValue)
  f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pinValue>
  f4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pinValue+0x1>
  f8:	28 17       	cp	r18, r24
  fa:	39 07       	cpc	r19, r25
  fc:	99 f0       	breq	.+38     	; 0x124 <main+0x7e>
			{
				//El pulso es válido, se implementa la lógica del sistema

				//Si no está presionado el pulsador (se detectó un keyup)...
				if (!buttonStateAux)
  fe:	21 15       	cp	r18, r1
 100:	31 05       	cpc	r19, r1
 102:	61 f4       	brne	.+24     	; 0x11c <main+0x76>
				{
					buttonState = (buttonState + 1) % 6;
 104:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <buttonState>
 108:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <buttonState+0x1>
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	bf 01       	movw	r22, r30
 110:	0e 94 4f 01 	call	0x29e	; 0x29e <__divmodhi4>
 114:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buttonState+0x1>
 118:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buttonState>
				}

				//Si hubo cambios válidos actualizo el valor de lectura anterior
				pinValue = buttonStateAux;
 11c:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <pinValue+0x1>
 120:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <pinValue>
			}
		}
		switch (buttonState)
 124:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <buttonState>
 128:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <buttonState+0x1>
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	91 05       	cpc	r25, r1
 130:	89 f1       	breq	.+98     	; 0x194 <main+0xee>
 132:	2c f4       	brge	.+10     	; 0x13e <main+0x98>
 134:	00 97       	sbiw	r24, 0x00	; 0
 136:	69 f0       	breq	.+26     	; 0x152 <main+0xac>
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	69 f0       	breq	.+26     	; 0x156 <main+0xb0>
 13c:	bb cf       	rjmp	.-138    	; 0xb4 <main+0xe>
 13e:	84 30       	cpi	r24, 0x04	; 4
 140:	91 05       	cpc	r25, r1
 142:	09 f4       	brne	.+2      	; 0x146 <main+0xa0>
 144:	63 c0       	rjmp	.+198    	; 0x20c <main+0x166>
 146:	0c f4       	brge	.+2      	; 0x14a <main+0xa4>
 148:	43 c0       	rjmp	.+134    	; 0x1d0 <main+0x12a>
 14a:	05 97       	sbiw	r24, 0x05	; 5
 14c:	09 f4       	brne	.+2      	; 0x150 <main+0xaa>
 14e:	a5 c0       	rjmp	.+330    	; 0x29a <main+0x1f4>
 150:	b1 cf       	rjmp	.-158    	; 0xb4 <main+0xe>
		{
			case 0:
				PORTB |= (1<<PB5);	//Enciende el Led
 152:	2d 9a       	sbi	0x05, 5	; 5
			break;
 154:	af cf       	rjmp	.-162    	; 0xb4 <main+0xe>
			case 1:
				if(counterDelay>=100)
 156:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 15a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 15e:	84 36       	cpi	r24, 0x64	; 100
 160:	91 05       	cpc	r25, r1
 162:	44 f0       	brlt	.+16     	; 0x174 <main+0xce>
				{
					PORTB ^= (1<<PB5); //Se modifica el estado del led (toggle vía XOR)
 164:	85 b1       	in	r24, 0x05	; 5
 166:	84 27       	eor	r24, r20
 168:	85 b9       	out	0x05, r24	; 5
					counterDelay = 0;
 16a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 16e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 172:	a0 cf       	rjmp	.-192    	; 0xb4 <main+0xe>
 174:	8f e3       	ldi	r24, 0x3F	; 63
 176:	9c e9       	ldi	r25, 0x9C	; 156
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xd2>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xd8>
 17e:	00 00       	nop
				}else
				{
					_delay_ms(10);
					counterDelay++;
 180:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 184:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 18e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 192:	90 cf       	rjmp	.-224    	; 0xb4 <main+0xe>
				}
			break;
			case 2:
				if(counterDelay>=50)
 194:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 198:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 19c:	c2 97       	sbiw	r24, 0x32	; 50
 19e:	44 f0       	brlt	.+16     	; 0x1b0 <main+0x10a>
				{
					PORTB ^= (1<<PB5); //Se modifica el estado del led (toggle vía XOR)
 1a0:	85 b1       	in	r24, 0x05	; 5
 1a2:	84 27       	eor	r24, r20
 1a4:	85 b9       	out	0x05, r24	; 5
					counterDelay = 0;
 1a6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 1aa:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 1ae:	82 cf       	rjmp	.-252    	; 0xb4 <main+0xe>
 1b0:	8f e3       	ldi	r24, 0x3F	; 63
 1b2:	9c e9       	ldi	r25, 0x9C	; 156
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <main+0x10e>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x114>
 1ba:	00 00       	nop
				}else
				{
					_delay_ms(10);
					counterDelay++;
 1bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1c0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 1ca:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1ce:	72 cf       	rjmp	.-284    	; 0xb4 <main+0xe>
				}
			break;
			case 3:
				if(counterDelay>=25)
 1d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1d4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1d8:	49 97       	sbiw	r24, 0x19	; 25
 1da:	44 f0       	brlt	.+16     	; 0x1ec <main+0x146>
				{
					PORTB ^= (1<<PB5); //Se modifica el estado del led (toggle vía XOR)
 1dc:	85 b1       	in	r24, 0x05	; 5
 1de:	84 27       	eor	r24, r20
 1e0:	85 b9       	out	0x05, r24	; 5
					counterDelay = 0;
 1e2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 1e6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 1ea:	64 cf       	rjmp	.-312    	; 0xb4 <main+0xe>
 1ec:	8f e3       	ldi	r24, 0x3F	; 63
 1ee:	9c e9       	ldi	r25, 0x9C	; 156
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <main+0x14a>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x150>
 1f6:	00 00       	nop
				}else
				{
					_delay_ms(10);
					counterDelay++;
 1f8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1fc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 206:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 20a:	54 cf       	rjmp	.-344    	; 0xb4 <main+0xe>
				}
			break;
			case 4:
			if(cuarto_caso)
 20c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 210:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 214:	89 2b       	or	r24, r25
 216:	01 f1       	breq	.+64     	; 0x258 <main+0x1b2>
			{
				if(counterDelay>=50)
 218:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 21c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 220:	c2 97       	sbiw	r24, 0x32	; 50
 222:	54 f0       	brlt	.+20     	; 0x238 <main+0x192>
				{
					PORTB &= ~(1<<PB5);     //Apaga el Led
 224:	2d 98       	cbi	0x05, 5	; 5
					counterDelay = 0;
 226:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 22a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
					cuarto_caso = 0;
 22e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 232:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 236:	3e cf       	rjmp	.-388    	; 0xb4 <main+0xe>
 238:	8f e3       	ldi	r24, 0x3F	; 63
 23a:	9c e9       	ldi	r25, 0x9C	; 156
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <main+0x196>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0x19c>
 242:	00 00       	nop
				}else
				{
					_delay_ms(10);
					counterDelay++;
 244:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 248:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 252:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 256:	2e cf       	rjmp	.-420    	; 0xb4 <main+0xe>
				}
			}else{
				if(counterDelay>=100)
 258:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 25c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 260:	84 36       	cpi	r24, 0x64	; 100
 262:	91 05       	cpc	r25, r1
 264:	54 f0       	brlt	.+20     	; 0x27a <main+0x1d4>
				{
					PORTB |= (1<<PB5);	//Enciende el Led
 266:	2d 9a       	sbi	0x05, 5	; 5
					counterDelay = 0;
 268:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 26c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
					cuarto_caso = 1;
 270:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 274:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 278:	1d cf       	rjmp	.-454    	; 0xb4 <main+0xe>
 27a:	8f e3       	ldi	r24, 0x3F	; 63
 27c:	9c e9       	ldi	r25, 0x9C	; 156
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <main+0x1d8>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0x1de>
 284:	00 00       	nop
				}else
				{
					_delay_ms(10);
					counterDelay++;
 286:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 28a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 294:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 298:	0d cf       	rjmp	.-486    	; 0xb4 <main+0xe>
				}
			}
			break;
			case 5:
				PORTB &= ~(1<<PB5);     //Apaga el Led
 29a:	2d 98       	cbi	0x05, 5	; 5
			break;
 29c:	0b cf       	rjmp	.-490    	; 0xb4 <main+0xe>

0000029e <__divmodhi4>:
 29e:	97 fb       	bst	r25, 7
 2a0:	07 2e       	mov	r0, r23
 2a2:	16 f4       	brtc	.+4      	; 0x2a8 <__divmodhi4+0xa>
 2a4:	00 94       	com	r0
 2a6:	07 d0       	rcall	.+14     	; 0x2b6 <__divmodhi4_neg1>
 2a8:	77 fd       	sbrc	r23, 7
 2aa:	09 d0       	rcall	.+18     	; 0x2be <__divmodhi4_neg2>
 2ac:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__udivmodhi4>
 2b0:	07 fc       	sbrc	r0, 7
 2b2:	05 d0       	rcall	.+10     	; 0x2be <__divmodhi4_neg2>
 2b4:	3e f4       	brtc	.+14     	; 0x2c4 <__divmodhi4_exit>

000002b6 <__divmodhi4_neg1>:
 2b6:	90 95       	com	r25
 2b8:	81 95       	neg	r24
 2ba:	9f 4f       	sbci	r25, 0xFF	; 255
 2bc:	08 95       	ret

000002be <__divmodhi4_neg2>:
 2be:	70 95       	com	r23
 2c0:	61 95       	neg	r22
 2c2:	7f 4f       	sbci	r23, 0xFF	; 255

000002c4 <__divmodhi4_exit>:
 2c4:	08 95       	ret

000002c6 <__udivmodhi4>:
 2c6:	aa 1b       	sub	r26, r26
 2c8:	bb 1b       	sub	r27, r27
 2ca:	51 e1       	ldi	r21, 0x11	; 17
 2cc:	07 c0       	rjmp	.+14     	; 0x2dc <__udivmodhi4_ep>

000002ce <__udivmodhi4_loop>:
 2ce:	aa 1f       	adc	r26, r26
 2d0:	bb 1f       	adc	r27, r27
 2d2:	a6 17       	cp	r26, r22
 2d4:	b7 07       	cpc	r27, r23
 2d6:	10 f0       	brcs	.+4      	; 0x2dc <__udivmodhi4_ep>
 2d8:	a6 1b       	sub	r26, r22
 2da:	b7 0b       	sbc	r27, r23

000002dc <__udivmodhi4_ep>:
 2dc:	88 1f       	adc	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	5a 95       	dec	r21
 2e2:	a9 f7       	brne	.-22     	; 0x2ce <__udivmodhi4_loop>
 2e4:	80 95       	com	r24
 2e6:	90 95       	com	r25
 2e8:	bc 01       	movw	r22, r24
 2ea:	cd 01       	movw	r24, r26
 2ec:	08 95       	ret

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>

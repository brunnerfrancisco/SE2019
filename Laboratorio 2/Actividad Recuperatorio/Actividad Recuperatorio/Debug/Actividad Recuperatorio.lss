
Actividad Recuperatorio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000b72  00000c06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000144  00800112  00800112  00000c18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001337  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6b  00000000  00000000  000020b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a7b  00000000  00000000  00002c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  000036a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c5  00000000  00000000  000038a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ec  00000000  00000000  00004069  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004455  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  24:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__vector_9>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  40:	0c 94 22 02 	jmp	0x444	; 0x444 <__vector_16>
  44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  48:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_18>
  4c:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__vector_19>
  50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	24 00       	.word	0x0024	; ????
  6e:	27 00       	.word	0x0027	; ????
  70:	2a 00       	.word	0x002a	; ????

00000072 <port_to_output_PGM>:
  72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <digital_pin_to_port_PGM>:
  7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  8c:	03 03 03 03                                         ....

00000090 <digital_pin_to_bit_mask_PGM>:
  90:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  a0:	04 08 10 20                                         ... 

000000a4 <digital_pin_to_timer_PGM>:
  a4:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
  b4:	00 00 00 00                                         ....

000000b8 <__ctors_start>:
  b8:	5d 05       	cpc	r21, r13

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_clear_bss>:
  c6:	22 e0       	ldi	r18, 0x02	; 2
  c8:	a2 e1       	ldi	r26, 0x12	; 18
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
  ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
  d0:	a6 35       	cpi	r26, 0x56	; 86
  d2:	b2 07       	cpc	r27, r18
  d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>

000000d6 <__do_copy_data>:
  d6:	11 e0       	ldi	r17, 0x01	; 1
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	e2 e7       	ldi	r30, 0x72	; 114
  de:	fb e0       	ldi	r31, 0x0B	; 11
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x10>
  e2:	05 90       	lpm	r0, Z+
  e4:	0d 92       	st	X+, r0
  e6:	a2 31       	cpi	r26, 0x12	; 18
  e8:	b1 07       	cpc	r27, r17
  ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0xc>

000000ec <__do_global_ctors>:
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	cd e5       	ldi	r28, 0x5D	; 93
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
  f4:	21 97       	sbiw	r28, 0x01	; 1
  f6:	fe 01       	movw	r30, r28
  f8:	0e 94 ac 05 	call	0xb58	; 0xb58 <__tablejump2__>
  fc:	cc 35       	cpi	r28, 0x5C	; 92
  fe:	d1 07       	cpc	r29, r17
 100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
 102:	0e 94 13 05 	call	0xa26	; 0xa26 <main>
 106:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <_exit>

0000010a <__bad_interrupt>:
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <_ZN5Print5writeEPKhj>:
 10e:	cf 92       	push	r12
 110:	df 92       	push	r13
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	6c 01       	movw	r12, r24
 120:	7a 01       	movw	r14, r20
 122:	8b 01       	movw	r16, r22
 124:	c0 e0       	ldi	r28, 0x00	; 0
 126:	d0 e0       	ldi	r29, 0x00	; 0
 128:	ce 15       	cp	r28, r14
 12a:	df 05       	cpc	r29, r15
 12c:	81 f0       	breq	.+32     	; 0x14e <_ZN5Print5writeEPKhj+0x40>
 12e:	d8 01       	movw	r26, r16
 130:	6d 91       	ld	r22, X+
 132:	8d 01       	movw	r16, r26
 134:	d6 01       	movw	r26, r12
 136:	ed 91       	ld	r30, X+
 138:	fc 91       	ld	r31, X
 13a:	01 90       	ld	r0, Z+
 13c:	f0 81       	ld	r31, Z
 13e:	e0 2d       	mov	r30, r0
 140:	c6 01       	movw	r24, r12
 142:	09 95       	icall
 144:	89 2b       	or	r24, r25
 146:	11 f0       	breq	.+4      	; 0x14c <_ZN5Print5writeEPKhj+0x3e>
 148:	21 96       	adiw	r28, 0x01	; 1
 14a:	ee cf       	rjmp	.-36     	; 0x128 <_ZN5Print5writeEPKhj+0x1a>
 14c:	7e 01       	movw	r14, r28
 14e:	c7 01       	movw	r24, r14
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	ff 90       	pop	r15
 15a:	ef 90       	pop	r14
 15c:	df 90       	pop	r13
 15e:	cf 90       	pop	r12
 160:	08 95       	ret

00000162 <_ZN5Print5flushEv>:
 162:	08 95       	ret

00000164 <_ZN5Print17availableForWriteEv>:
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	08 95       	ret

0000016a <_ZN14HardwareSerial17availableForWriteEv>:
 16a:	fc 01       	movw	r30, r24
 16c:	53 8d       	ldd	r21, Z+27	; 0x1b
 16e:	44 8d       	ldd	r20, Z+28	; 0x1c
 170:	25 2f       	mov	r18, r21
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	84 2f       	mov	r24, r20
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	82 1b       	sub	r24, r18
 17a:	93 0b       	sbc	r25, r19
 17c:	54 17       	cp	r21, r20
 17e:	10 f0       	brcs	.+4      	; 0x184 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 180:	cf 96       	adiw	r24, 0x3f	; 63
 182:	08 95       	ret
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	08 95       	ret

00000188 <_ZN14HardwareSerial4readEv>:
 188:	fc 01       	movw	r30, r24
 18a:	91 8d       	ldd	r25, Z+25	; 0x19
 18c:	82 8d       	ldd	r24, Z+26	; 0x1a
 18e:	98 17       	cp	r25, r24
 190:	61 f0       	breq	.+24     	; 0x1aa <_ZN14HardwareSerial4readEv+0x22>
 192:	82 8d       	ldd	r24, Z+26	; 0x1a
 194:	df 01       	movw	r26, r30
 196:	a8 0f       	add	r26, r24
 198:	b1 1d       	adc	r27, r1
 19a:	5d 96       	adiw	r26, 0x1d	; 29
 19c:	8c 91       	ld	r24, X
 19e:	92 8d       	ldd	r25, Z+26	; 0x1a
 1a0:	9f 5f       	subi	r25, 0xFF	; 255
 1a2:	9f 73       	andi	r25, 0x3F	; 63
 1a4:	92 8f       	std	Z+26, r25	; 0x1a
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	08 95       	ret
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	9f ef       	ldi	r25, 0xFF	; 255
 1ae:	08 95       	ret

000001b0 <_ZN14HardwareSerial4peekEv>:
 1b0:	fc 01       	movw	r30, r24
 1b2:	91 8d       	ldd	r25, Z+25	; 0x19
 1b4:	82 8d       	ldd	r24, Z+26	; 0x1a
 1b6:	98 17       	cp	r25, r24
 1b8:	31 f0       	breq	.+12     	; 0x1c6 <_ZN14HardwareSerial4peekEv+0x16>
 1ba:	82 8d       	ldd	r24, Z+26	; 0x1a
 1bc:	e8 0f       	add	r30, r24
 1be:	f1 1d       	adc	r31, r1
 1c0:	85 8d       	ldd	r24, Z+29	; 0x1d
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	08 95       	ret
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	9f ef       	ldi	r25, 0xFF	; 255
 1ca:	08 95       	ret

000001cc <_ZN14HardwareSerial9availableEv>:
 1cc:	fc 01       	movw	r30, r24
 1ce:	91 8d       	ldd	r25, Z+25	; 0x19
 1d0:	22 8d       	ldd	r18, Z+26	; 0x1a
 1d2:	89 2f       	mov	r24, r25
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	80 5c       	subi	r24, 0xC0	; 192
 1d8:	9f 4f       	sbci	r25, 0xFF	; 255
 1da:	82 1b       	sub	r24, r18
 1dc:	91 09       	sbc	r25, r1
 1de:	8f 73       	andi	r24, 0x3F	; 63
 1e0:	99 27       	eor	r25, r25
 1e2:	08 95       	ret

000001e4 <_Z17Serial0_availablev>:
 1e4:	82 e1       	ldi	r24, 0x12	; 18
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_ZN14HardwareSerial9availableEv>
 1ec:	21 e0       	ldi	r18, 0x01	; 1
 1ee:	89 2b       	or	r24, r25
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <_Z17Serial0_availablev+0x10>
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	82 2f       	mov	r24, r18
 1f6:	08 95       	ret

000001f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
 1f8:	fc 01       	movw	r30, r24
 1fa:	84 8d       	ldd	r24, Z+28	; 0x1c
 1fc:	df 01       	movw	r26, r30
 1fe:	a8 0f       	add	r26, r24
 200:	b1 1d       	adc	r27, r1
 202:	a3 5a       	subi	r26, 0xA3	; 163
 204:	bf 4f       	sbci	r27, 0xFF	; 255
 206:	2c 91       	ld	r18, X
 208:	84 8d       	ldd	r24, Z+28	; 0x1c
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	8f 73       	andi	r24, 0x3F	; 63
 210:	99 27       	eor	r25, r25
 212:	84 8f       	std	Z+28, r24	; 0x1c
 214:	a6 89       	ldd	r26, Z+22	; 0x16
 216:	b7 89       	ldd	r27, Z+23	; 0x17
 218:	2c 93       	st	X, r18
 21a:	a0 89       	ldd	r26, Z+16	; 0x10
 21c:	b1 89       	ldd	r27, Z+17	; 0x11
 21e:	8c 91       	ld	r24, X
 220:	83 70       	andi	r24, 0x03	; 3
 222:	80 64       	ori	r24, 0x40	; 64
 224:	8c 93       	st	X, r24
 226:	93 8d       	ldd	r25, Z+27	; 0x1b
 228:	84 8d       	ldd	r24, Z+28	; 0x1c
 22a:	98 13       	cpse	r25, r24
 22c:	06 c0       	rjmp	.+12     	; 0x23a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
 22e:	02 88       	ldd	r0, Z+18	; 0x12
 230:	f3 89       	ldd	r31, Z+19	; 0x13
 232:	e0 2d       	mov	r30, r0
 234:	80 81       	ld	r24, Z
 236:	8f 7d       	andi	r24, 0xDF	; 223
 238:	80 83       	st	Z, r24
 23a:	08 95       	ret

0000023c <_ZN14HardwareSerial5writeEh>:
 23c:	ef 92       	push	r14
 23e:	ff 92       	push	r15
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	ec 01       	movw	r28, r24
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	88 8f       	std	Y+24, r24	; 0x18
 24e:	9b 8d       	ldd	r25, Y+27	; 0x1b
 250:	8c 8d       	ldd	r24, Y+28	; 0x1c
 252:	98 13       	cpse	r25, r24
 254:	05 c0       	rjmp	.+10     	; 0x260 <_ZN14HardwareSerial5writeEh+0x24>
 256:	e8 89       	ldd	r30, Y+16	; 0x10
 258:	f9 89       	ldd	r31, Y+17	; 0x11
 25a:	80 81       	ld	r24, Z
 25c:	85 fd       	sbrc	r24, 5
 25e:	26 c0       	rjmp	.+76     	; 0x2ac <_ZN14HardwareSerial5writeEh+0x70>
 260:	f6 2e       	mov	r15, r22
 262:	0b 8d       	ldd	r16, Y+27	; 0x1b
 264:	10 e0       	ldi	r17, 0x00	; 0
 266:	0f 5f       	subi	r16, 0xFF	; 255
 268:	1f 4f       	sbci	r17, 0xFF	; 255
 26a:	0f 73       	andi	r16, 0x3F	; 63
 26c:	11 27       	eor	r17, r17
 26e:	e0 2e       	mov	r14, r16
 270:	8c 8d       	ldd	r24, Y+28	; 0x1c
 272:	e8 12       	cpse	r14, r24
 274:	0c c0       	rjmp	.+24     	; 0x28e <_ZN14HardwareSerial5writeEh+0x52>
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	07 fc       	sbrc	r0, 7
 27a:	fa cf       	rjmp	.-12     	; 0x270 <_ZN14HardwareSerial5writeEh+0x34>
 27c:	e8 89       	ldd	r30, Y+16	; 0x10
 27e:	f9 89       	ldd	r31, Y+17	; 0x11
 280:	80 81       	ld	r24, Z
 282:	85 ff       	sbrs	r24, 5
 284:	f5 cf       	rjmp	.-22     	; 0x270 <_ZN14HardwareSerial5writeEh+0x34>
 286:	ce 01       	movw	r24, r28
 288:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 28c:	f1 cf       	rjmp	.-30     	; 0x270 <_ZN14HardwareSerial5writeEh+0x34>
 28e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 290:	fe 01       	movw	r30, r28
 292:	e8 0f       	add	r30, r24
 294:	f1 1d       	adc	r31, r1
 296:	e3 5a       	subi	r30, 0xA3	; 163
 298:	ff 4f       	sbci	r31, 0xFF	; 255
 29a:	f0 82       	st	Z, r15
 29c:	9f b7       	in	r25, 0x3f	; 63
 29e:	f8 94       	cli
 2a0:	0b 8f       	std	Y+27, r16	; 0x1b
 2a2:	ea 89       	ldd	r30, Y+18	; 0x12
 2a4:	fb 89       	ldd	r31, Y+19	; 0x13
 2a6:	80 81       	ld	r24, Z
 2a8:	80 62       	ori	r24, 0x20	; 32
 2aa:	0a c0       	rjmp	.+20     	; 0x2c0 <_ZN14HardwareSerial5writeEh+0x84>
 2ac:	9f b7       	in	r25, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	ee 89       	ldd	r30, Y+22	; 0x16
 2b2:	ff 89       	ldd	r31, Y+23	; 0x17
 2b4:	60 83       	st	Z, r22
 2b6:	e8 89       	ldd	r30, Y+16	; 0x10
 2b8:	f9 89       	ldd	r31, Y+17	; 0x11
 2ba:	80 81       	ld	r24, Z
 2bc:	83 70       	andi	r24, 0x03	; 3
 2be:	80 64       	ori	r24, 0x40	; 64
 2c0:	80 83       	st	Z, r24
 2c2:	9f bf       	out	0x3f, r25	; 63
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	ff 90       	pop	r15
 2d2:	ef 90       	pop	r14
 2d4:	08 95       	ret

000002d6 <_ZN14HardwareSerial5flushEv>:
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	ec 01       	movw	r28, r24
 2dc:	88 8d       	ldd	r24, Y+24	; 0x18
 2de:	88 23       	and	r24, r24
 2e0:	c9 f0       	breq	.+50     	; 0x314 <_ZN14HardwareSerial5flushEv+0x3e>
 2e2:	ea 89       	ldd	r30, Y+18	; 0x12
 2e4:	fb 89       	ldd	r31, Y+19	; 0x13
 2e6:	80 81       	ld	r24, Z
 2e8:	85 fd       	sbrc	r24, 5
 2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <_ZN14HardwareSerial5flushEv+0x20>
 2ec:	a8 89       	ldd	r26, Y+16	; 0x10
 2ee:	b9 89       	ldd	r27, Y+17	; 0x11
 2f0:	8c 91       	ld	r24, X
 2f2:	86 fd       	sbrc	r24, 6
 2f4:	0f c0       	rjmp	.+30     	; 0x314 <_ZN14HardwareSerial5flushEv+0x3e>
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	07 fc       	sbrc	r0, 7
 2fa:	f5 cf       	rjmp	.-22     	; 0x2e6 <_ZN14HardwareSerial5flushEv+0x10>
 2fc:	80 81       	ld	r24, Z
 2fe:	85 ff       	sbrs	r24, 5
 300:	f2 cf       	rjmp	.-28     	; 0x2e6 <_ZN14HardwareSerial5flushEv+0x10>
 302:	a8 89       	ldd	r26, Y+16	; 0x10
 304:	b9 89       	ldd	r27, Y+17	; 0x11
 306:	8c 91       	ld	r24, X
 308:	85 ff       	sbrs	r24, 5
 30a:	ed cf       	rjmp	.-38     	; 0x2e6 <_ZN14HardwareSerial5flushEv+0x10>
 30c:	ce 01       	movw	r24, r28
 30e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 312:	e7 cf       	rjmp	.-50     	; 0x2e2 <_ZN14HardwareSerial5flushEv+0xc>
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <_Z14serialEventRunv>:
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	89 2b       	or	r24, r25
 320:	29 f0       	breq	.+10     	; 0x32c <_Z14serialEventRunv+0x12>
 322:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_Z17Serial0_availablev>
 326:	81 11       	cpse	r24, r1
 328:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 32c:	08 95       	ret

0000032e <__cxa_pure_virtual>:
 32e:	0e 94 b2 05 	call	0xb64	; 0xb64 <abort>

00000332 <digitalWrite>:
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	fc 01       	movw	r30, r24
 336:	ec 55       	subi	r30, 0x5C	; 92
 338:	ff 4f       	sbci	r31, 0xFF	; 255
 33a:	24 91       	lpm	r18, Z
 33c:	fc 01       	movw	r30, r24
 33e:	e0 57       	subi	r30, 0x70	; 112
 340:	ff 4f       	sbci	r31, 0xFF	; 255
 342:	34 91       	lpm	r19, Z
 344:	fc 01       	movw	r30, r24
 346:	e4 58       	subi	r30, 0x84	; 132
 348:	ff 4f       	sbci	r31, 0xFF	; 255
 34a:	e4 91       	lpm	r30, Z
 34c:	ee 23       	and	r30, r30
 34e:	09 f4       	brne	.+2      	; 0x352 <digitalWrite+0x20>
 350:	3c c0       	rjmp	.+120    	; 0x3ca <digitalWrite+0x98>
 352:	22 23       	and	r18, r18
 354:	39 f1       	breq	.+78     	; 0x3a4 <digitalWrite+0x72>
 356:	23 30       	cpi	r18, 0x03	; 3
 358:	91 f0       	breq	.+36     	; 0x37e <digitalWrite+0x4c>
 35a:	38 f4       	brcc	.+14     	; 0x36a <digitalWrite+0x38>
 35c:	21 30       	cpi	r18, 0x01	; 1
 35e:	a9 f0       	breq	.+42     	; 0x38a <digitalWrite+0x58>
 360:	22 30       	cpi	r18, 0x02	; 2
 362:	01 f5       	brne	.+64     	; 0x3a4 <digitalWrite+0x72>
 364:	84 b5       	in	r24, 0x24	; 36
 366:	8f 7d       	andi	r24, 0xDF	; 223
 368:	12 c0       	rjmp	.+36     	; 0x38e <digitalWrite+0x5c>
 36a:	27 30       	cpi	r18, 0x07	; 7
 36c:	91 f0       	breq	.+36     	; 0x392 <digitalWrite+0x60>
 36e:	28 30       	cpi	r18, 0x08	; 8
 370:	a1 f0       	breq	.+40     	; 0x39a <digitalWrite+0x68>
 372:	24 30       	cpi	r18, 0x04	; 4
 374:	b9 f4       	brne	.+46     	; 0x3a4 <digitalWrite+0x72>
 376:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 37a:	8f 7d       	andi	r24, 0xDF	; 223
 37c:	03 c0       	rjmp	.+6      	; 0x384 <digitalWrite+0x52>
 37e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 382:	8f 77       	andi	r24, 0x7F	; 127
 384:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 388:	0d c0       	rjmp	.+26     	; 0x3a4 <digitalWrite+0x72>
 38a:	84 b5       	in	r24, 0x24	; 36
 38c:	8f 77       	andi	r24, 0x7F	; 127
 38e:	84 bd       	out	0x24, r24	; 36
 390:	09 c0       	rjmp	.+18     	; 0x3a4 <digitalWrite+0x72>
 392:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 396:	8f 77       	andi	r24, 0x7F	; 127
 398:	03 c0       	rjmp	.+6      	; 0x3a0 <digitalWrite+0x6e>
 39a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 39e:	8f 7d       	andi	r24, 0xDF	; 223
 3a0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	ee 0f       	add	r30, r30
 3a8:	ff 1f       	adc	r31, r31
 3aa:	ee 58       	subi	r30, 0x8E	; 142
 3ac:	ff 4f       	sbci	r31, 0xFF	; 255
 3ae:	a5 91       	lpm	r26, Z+
 3b0:	b4 91       	lpm	r27, Z
 3b2:	9f b7       	in	r25, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	61 11       	cpse	r22, r1
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <digitalWrite+0x90>
 3ba:	8c 91       	ld	r24, X
 3bc:	30 95       	com	r19
 3be:	38 23       	and	r19, r24
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <digitalWrite+0x94>
 3c2:	ec 91       	ld	r30, X
 3c4:	3e 2b       	or	r19, r30
 3c6:	3c 93       	st	X, r19
 3c8:	9f bf       	out	0x3f, r25	; 63
 3ca:	08 95       	ret

000003cc <pinMode>:
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	fc 01       	movw	r30, r24
 3d4:	e0 57       	subi	r30, 0x70	; 112
 3d6:	ff 4f       	sbci	r31, 0xFF	; 255
 3d8:	24 91       	lpm	r18, Z
 3da:	fc 01       	movw	r30, r24
 3dc:	e4 58       	subi	r30, 0x84	; 132
 3de:	ff 4f       	sbci	r31, 0xFF	; 255
 3e0:	84 91       	lpm	r24, Z
 3e2:	88 23       	and	r24, r24
 3e4:	61 f1       	breq	.+88     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	fc 01       	movw	r30, r24
 3ee:	e8 59       	subi	r30, 0x98	; 152
 3f0:	ff 4f       	sbci	r31, 0xFF	; 255
 3f2:	c5 91       	lpm	r28, Z+
 3f4:	d4 91       	lpm	r29, Z
 3f6:	fc 01       	movw	r30, r24
 3f8:	ee 58       	subi	r30, 0x8E	; 142
 3fa:	ff 4f       	sbci	r31, 0xFF	; 255
 3fc:	a5 91       	lpm	r26, Z+
 3fe:	b4 91       	lpm	r27, Z
 400:	61 11       	cpse	r22, r1
 402:	09 c0       	rjmp	.+18     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 404:	9f b7       	in	r25, 0x3f	; 63
 406:	f8 94       	cli
 408:	88 81       	ld	r24, Y
 40a:	20 95       	com	r18
 40c:	82 23       	and	r24, r18
 40e:	88 83       	st	Y, r24
 410:	ec 91       	ld	r30, X
 412:	2e 23       	and	r18, r30
 414:	0b c0       	rjmp	.+22     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 416:	62 30       	cpi	r22, 0x02	; 2
 418:	61 f4       	brne	.+24     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 41a:	9f b7       	in	r25, 0x3f	; 63
 41c:	f8 94       	cli
 41e:	88 81       	ld	r24, Y
 420:	32 2f       	mov	r19, r18
 422:	30 95       	com	r19
 424:	83 23       	and	r24, r19
 426:	88 83       	st	Y, r24
 428:	ec 91       	ld	r30, X
 42a:	2e 2b       	or	r18, r30
 42c:	2c 93       	st	X, r18
 42e:	9f bf       	out	0x3f, r25	; 63
 430:	06 c0       	rjmp	.+12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 432:	8f b7       	in	r24, 0x3f	; 63
 434:	f8 94       	cli
 436:	e8 81       	ld	r30, Y
 438:	2e 2b       	or	r18, r30
 43a:	28 83       	st	Y, r18
 43c:	8f bf       	out	0x3f, r24	; 63
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <__vector_16>:
 444:	1f 92       	push	r1
 446:	0f 92       	push	r0
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	0f 92       	push	r0
 44c:	11 24       	eor	r1, r1
 44e:	2f 93       	push	r18
 450:	3f 93       	push	r19
 452:	8f 93       	push	r24
 454:	9f 93       	push	r25
 456:	af 93       	push	r26
 458:	bf 93       	push	r27
 45a:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <timer0_millis>
 45e:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <timer0_millis+0x1>
 462:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <timer0_millis+0x2>
 466:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <timer0_millis+0x3>
 46a:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <timer0_fract>
 46e:	23 e0       	ldi	r18, 0x03	; 3
 470:	23 0f       	add	r18, r19
 472:	2d 37       	cpi	r18, 0x7D	; 125
 474:	20 f4       	brcc	.+8      	; 0x47e <__vector_16+0x3a>
 476:	01 96       	adiw	r24, 0x01	; 1
 478:	a1 1d       	adc	r26, r1
 47a:	b1 1d       	adc	r27, r1
 47c:	05 c0       	rjmp	.+10     	; 0x488 <__vector_16+0x44>
 47e:	26 e8       	ldi	r18, 0x86	; 134
 480:	23 0f       	add	r18, r19
 482:	02 96       	adiw	r24, 0x02	; 2
 484:	a1 1d       	adc	r26, r1
 486:	b1 1d       	adc	r27, r1
 488:	20 93 b3 01 	sts	0x01B3, r18	; 0x8001b3 <timer0_fract>
 48c:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <timer0_millis>
 490:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <timer0_millis+0x1>
 494:	a0 93 b6 01 	sts	0x01B6, r26	; 0x8001b6 <timer0_millis+0x2>
 498:	b0 93 b7 01 	sts	0x01B7, r27	; 0x8001b7 <timer0_millis+0x3>
 49c:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <timer0_overflow_count>
 4a0:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <timer0_overflow_count+0x1>
 4a4:	a0 91 b1 01 	lds	r26, 0x01B1	; 0x8001b1 <timer0_overflow_count+0x2>
 4a8:	b0 91 b2 01 	lds	r27, 0x01B2	; 0x8001b2 <timer0_overflow_count+0x3>
 4ac:	01 96       	adiw	r24, 0x01	; 1
 4ae:	a1 1d       	adc	r26, r1
 4b0:	b1 1d       	adc	r27, r1
 4b2:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <timer0_overflow_count>
 4b6:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <timer0_overflow_count+0x1>
 4ba:	a0 93 b1 01 	sts	0x01B1, r26	; 0x8001b1 <timer0_overflow_count+0x2>
 4be:	b0 93 b2 01 	sts	0x01B2, r27	; 0x8001b2 <timer0_overflow_count+0x3>
 4c2:	bf 91       	pop	r27
 4c4:	af 91       	pop	r26
 4c6:	9f 91       	pop	r25
 4c8:	8f 91       	pop	r24
 4ca:	3f 91       	pop	r19
 4cc:	2f 91       	pop	r18
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <__vector_19>:
 4d8:	1f 92       	push	r1
 4da:	0f 92       	push	r0
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	0f 92       	push	r0
 4e0:	11 24       	eor	r1, r1
 4e2:	2f 93       	push	r18
 4e4:	3f 93       	push	r19
 4e6:	4f 93       	push	r20
 4e8:	5f 93       	push	r21
 4ea:	6f 93       	push	r22
 4ec:	7f 93       	push	r23
 4ee:	8f 93       	push	r24
 4f0:	9f 93       	push	r25
 4f2:	af 93       	push	r26
 4f4:	bf 93       	push	r27
 4f6:	ef 93       	push	r30
 4f8:	ff 93       	push	r31
 4fa:	82 e1       	ldi	r24, 0x12	; 18
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 502:	ff 91       	pop	r31
 504:	ef 91       	pop	r30
 506:	bf 91       	pop	r27
 508:	af 91       	pop	r26
 50a:	9f 91       	pop	r25
 50c:	8f 91       	pop	r24
 50e:	7f 91       	pop	r23
 510:	6f 91       	pop	r22
 512:	5f 91       	pop	r21
 514:	4f 91       	pop	r20
 516:	3f 91       	pop	r19
 518:	2f 91       	pop	r18
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <__vector_18>:
 524:	1f 92       	push	r1
 526:	0f 92       	push	r0
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	0f 92       	push	r0
 52c:	11 24       	eor	r1, r1
 52e:	2f 93       	push	r18
 530:	8f 93       	push	r24
 532:	9f 93       	push	r25
 534:	ef 93       	push	r30
 536:	ff 93       	push	r31
 538:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <__data_end+0x10>
 53c:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <__data_end+0x11>
 540:	80 81       	ld	r24, Z
 542:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <__data_end+0x16>
 546:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <__data_end+0x17>
 54a:	82 fd       	sbrc	r24, 2
 54c:	12 c0       	rjmp	.+36     	; 0x572 <__vector_18+0x4e>
 54e:	90 81       	ld	r25, Z
 550:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <__data_end+0x19>
 554:	8f 5f       	subi	r24, 0xFF	; 255
 556:	8f 73       	andi	r24, 0x3F	; 63
 558:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <__data_end+0x1a>
 55c:	82 17       	cp	r24, r18
 55e:	51 f0       	breq	.+20     	; 0x574 <__vector_18+0x50>
 560:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <__data_end+0x19>
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	ee 5e       	subi	r30, 0xEE	; 238
 568:	fe 4f       	sbci	r31, 0xFE	; 254
 56a:	95 8f       	std	Z+29, r25	; 0x1d
 56c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <__data_end+0x19>
 570:	01 c0       	rjmp	.+2      	; 0x574 <__vector_18+0x50>
 572:	80 81       	ld	r24, Z
 574:	ff 91       	pop	r31
 576:	ef 91       	pop	r30
 578:	9f 91       	pop	r25
 57a:	8f 91       	pop	r24
 57c:	2f 91       	pop	r18
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <_ZN14HardwareSerial5beginEmh>:
 588:	cf 92       	push	r12
 58a:	df 92       	push	r13
 58c:	ef 92       	push	r14
 58e:	ff 92       	push	r15
 590:	1f 93       	push	r17
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	ec 01       	movw	r28, r24
 598:	6a 01       	movw	r12, r20
 59a:	7b 01       	movw	r14, r22
 59c:	12 2f       	mov	r17, r18
 59e:	e8 89       	ldd	r30, Y+16	; 0x10
 5a0:	f9 89       	ldd	r31, Y+17	; 0x11
 5a2:	82 e0       	ldi	r24, 0x02	; 2
 5a4:	80 83       	st	Z, r24
 5a6:	41 15       	cp	r20, r1
 5a8:	51 4e       	sbci	r21, 0xE1	; 225
 5aa:	61 05       	cpc	r22, r1
 5ac:	71 05       	cpc	r23, r1
 5ae:	b1 f0       	breq	.+44     	; 0x5dc <_ZN14HardwareSerial5beginEmh+0x54>
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	79 e0       	ldi	r23, 0x09	; 9
 5b4:	8d e3       	ldi	r24, 0x3D	; 61
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	a7 01       	movw	r20, r14
 5ba:	96 01       	movw	r18, r12
 5bc:	0e 94 8a 05 	call	0xb14	; 0xb14 <__udivmodsi4>
 5c0:	da 01       	movw	r26, r20
 5c2:	c9 01       	movw	r24, r18
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	a1 09       	sbc	r26, r1
 5c8:	b1 09       	sbc	r27, r1
 5ca:	b6 95       	lsr	r27
 5cc:	a7 95       	ror	r26
 5ce:	97 95       	ror	r25
 5d0:	87 95       	ror	r24
 5d2:	9c 01       	movw	r18, r24
 5d4:	21 15       	cp	r18, r1
 5d6:	80 e1       	ldi	r24, 0x10	; 16
 5d8:	38 07       	cpc	r19, r24
 5da:	a8 f0       	brcs	.+42     	; 0x606 <_ZN14HardwareSerial5beginEmh+0x7e>
 5dc:	e8 89       	ldd	r30, Y+16	; 0x10
 5de:	f9 89       	ldd	r31, Y+17	; 0x11
 5e0:	10 82       	st	Z, r1
 5e2:	60 e8       	ldi	r22, 0x80	; 128
 5e4:	74 e8       	ldi	r23, 0x84	; 132
 5e6:	8e e1       	ldi	r24, 0x1E	; 30
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	a7 01       	movw	r20, r14
 5ec:	96 01       	movw	r18, r12
 5ee:	0e 94 8a 05 	call	0xb14	; 0xb14 <__udivmodsi4>
 5f2:	da 01       	movw	r26, r20
 5f4:	c9 01       	movw	r24, r18
 5f6:	01 97       	sbiw	r24, 0x01	; 1
 5f8:	a1 09       	sbc	r26, r1
 5fa:	b1 09       	sbc	r27, r1
 5fc:	b6 95       	lsr	r27
 5fe:	a7 95       	ror	r26
 600:	97 95       	ror	r25
 602:	87 95       	ror	r24
 604:	9c 01       	movw	r18, r24
 606:	ec 85       	ldd	r30, Y+12	; 0x0c
 608:	fd 85       	ldd	r31, Y+13	; 0x0d
 60a:	30 83       	st	Z, r19
 60c:	ee 85       	ldd	r30, Y+14	; 0x0e
 60e:	ff 85       	ldd	r31, Y+15	; 0x0f
 610:	20 83       	st	Z, r18
 612:	18 8e       	std	Y+24, r1	; 0x18
 614:	ec 89       	ldd	r30, Y+20	; 0x14
 616:	fd 89       	ldd	r31, Y+21	; 0x15
 618:	10 83       	st	Z, r17
 61a:	ea 89       	ldd	r30, Y+18	; 0x12
 61c:	fb 89       	ldd	r31, Y+19	; 0x13
 61e:	80 81       	ld	r24, Z
 620:	80 61       	ori	r24, 0x10	; 16
 622:	80 83       	st	Z, r24
 624:	ea 89       	ldd	r30, Y+18	; 0x12
 626:	fb 89       	ldd	r31, Y+19	; 0x13
 628:	80 81       	ld	r24, Z
 62a:	88 60       	ori	r24, 0x08	; 8
 62c:	80 83       	st	Z, r24
 62e:	ea 89       	ldd	r30, Y+18	; 0x12
 630:	fb 89       	ldd	r31, Y+19	; 0x13
 632:	80 81       	ld	r24, Z
 634:	80 68       	ori	r24, 0x80	; 128
 636:	80 83       	st	Z, r24
 638:	ea 89       	ldd	r30, Y+18	; 0x12
 63a:	fb 89       	ldd	r31, Y+19	; 0x13
 63c:	80 81       	ld	r24, Z
 63e:	8f 7d       	andi	r24, 0xDF	; 223
 640:	80 83       	st	Z, r24
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	1f 91       	pop	r17
 648:	ff 90       	pop	r15
 64a:	ef 90       	pop	r14
 64c:	df 90       	pop	r13
 64e:	cf 90       	pop	r12
 650:	08 95       	ret

00000652 <_Z14critical_beginv>:
    // módulo de región crítica. Esto puede suceder cuando se está ejecutando
    // una rutina de interrupción. En este caso, no deshabilitar las
    // interrupciones

    // Lectura atómica del registro
    uint8_t status_register = SREG;
 652:	2f b7       	in	r18, 0x3f	; 63
    cli();
 654:	f8 94       	cli

    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if (((anidamiento == 0) && ((status_register & (0x80)) != 0)) || ((anidamiento != 0) && ((status_register & (0x80)) == 0)))
 656:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <_ZL11anidamiento>
 65a:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <_ZL11anidamiento+0x1>
 65e:	89 2b       	or	r24, r25
 660:	19 f4       	brne	.+6      	; 0x668 <_Z14critical_beginv+0x16>
 662:	22 23       	and	r18, r18
 664:	9c f4       	brge	.+38     	; 0x68c <_Z14critical_beginv+0x3a>
 666:	08 c0       	rjmp	.+16     	; 0x678 <_Z14critical_beginv+0x26>
 668:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <_ZL11anidamiento>
 66c:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <_ZL11anidamiento+0x1>
 670:	89 2b       	or	r24, r25
 672:	91 f0       	breq	.+36     	; 0x698 <_Z14critical_beginv+0x46>
 674:	22 23       	and	r18, r18
 676:	84 f0       	brlt	.+32     	; 0x698 <_Z14critical_beginv+0x46>
    {
        anidamiento++;
 678:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <_ZL11anidamiento>
 67c:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <_ZL11anidamiento+0x1>
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <_ZL11anidamiento+0x1>
 686:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <_ZL11anidamiento>
 68a:	08 95       	ret

    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if (((anidamiento == 0) && ((status_register & (0x80)) != 0)) || ((anidamiento != 0) && ((status_register & (0x80)) == 0)))
 68c:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <_ZL11anidamiento>
 690:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <_ZL11anidamiento+0x1>
 694:	89 2b       	or	r24, r25
 696:	81 f7       	brne	.-32     	; 0x678 <_Z14critical_beginv+0x26>
 698:	08 95       	ret

0000069a <_Z12critical_endv>:
    // crítica, no hacer nada.
}

void critical_end(void)
{
    uint8_t status_register = SREG;
 69a:	2f b7       	in	r18, 0x3f	; 63
    cli();
 69c:	f8 94       	cli

    if (anidamiento > 0) {
 69e:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <_ZL11anidamiento>
 6a2:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <_ZL11anidamiento+0x1>
 6a6:	18 16       	cp	r1, r24
 6a8:	19 06       	cpc	r1, r25
 6aa:	8c f4       	brge	.+34     	; 0x6ce <_Z12critical_endv+0x34>
        anidamiento--;
 6ac:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <_ZL11anidamiento>
 6b0:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <_ZL11anidamiento+0x1>
 6b4:	01 97       	sbiw	r24, 0x01	; 1
 6b6:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <_ZL11anidamiento+0x1>
 6ba:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <_ZL11anidamiento>
        if (anidamiento == 0)
 6be:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <_ZL11anidamiento>
 6c2:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <_ZL11anidamiento+0x1>
 6c6:	89 2b       	or	r24, r25
 6c8:	29 f4       	brne	.+10     	; 0x6d4 <_Z12critical_endv+0x3a>
            sei();
 6ca:	78 94       	sei
 6cc:	08 95       	ret
    }
    else if ((status_register & 0x80) != 0)
 6ce:	22 23       	and	r18, r18
 6d0:	0c f4       	brge	.+2      	; 0x6d4 <_Z12critical_endv+0x3a>
        sei();
 6d2:	78 94       	sei
 6d4:	08 95       	ret

000006d6 <_Z11fnqueue_runv>:
    return true;
}

bool fnqueue_run(void)
{
    critical_begin();
 6d6:	0e 94 29 03 	call	0x652	; 0x652 <_Z14critical_beginv>
    if (fnqueue_count > 0)
 6da:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <_ZL13fnqueue_count>
 6de:	88 23       	and	r24, r24
 6e0:	11 f1       	breq	.+68     	; 0x726 <_Z11fnqueue_runv+0x50>
    {
        critical_end();
 6e2:	0e 94 4d 03 	call	0x69a	; 0x69a <_Z12critical_endv>

        fnqueue_functions[fnqueue_head]();
 6e6:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <_ZL12fnqueue_head>
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	ee 0f       	add	r30, r30
 6ee:	ff 1f       	adc	r31, r31
 6f0:	e3 54       	subi	r30, 0x43	; 67
 6f2:	fe 4f       	sbci	r31, 0xFE	; 254
 6f4:	01 90       	ld	r0, Z+
 6f6:	f0 81       	ld	r31, Z
 6f8:	e0 2d       	mov	r30, r0
 6fa:	09 95       	icall
        critical_begin();
 6fc:	0e 94 29 03 	call	0x652	; 0x652 <_Z14critical_beginv>
        fnqueue_head = (fnqueue_head + 1) % FNQUEUE_LENGTH;
 700:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_ZL12fnqueue_head>
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	01 96       	adiw	r24, 0x01	; 1
 708:	8f 70       	andi	r24, 0x0F	; 15
 70a:	90 78       	andi	r25, 0x80	; 128
 70c:	99 23       	and	r25, r25
 70e:	24 f4       	brge	.+8      	; 0x718 <_Z11fnqueue_runv+0x42>
 710:	01 97       	sbiw	r24, 0x01	; 1
 712:	80 6f       	ori	r24, 0xF0	; 240
 714:	9f 6f       	ori	r25, 0xFF	; 255
 716:	01 96       	adiw	r24, 0x01	; 1
 718:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <_ZL12fnqueue_head>
        fnqueue_count--;
 71c:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <_ZL13fnqueue_count>
 720:	81 50       	subi	r24, 0x01	; 1
 722:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <_ZL13fnqueue_count>
    }
    critical_end();
 726:	0e 94 4d 03 	call	0x69a	; 0x69a <_Z12critical_endv>

	return 1;
}
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	08 95       	ret

0000072e <_Z11fnqueue_addPFvvE>:

bool fnqueue_add(void (*function)(void))
{
 72e:	cf 93       	push	r28
 730:	df 93       	push	r29
 732:	ec 01       	movw	r28, r24
	bool result = false;
	
    critical_begin();
 734:	0e 94 29 03 	call	0x652	; 0x652 <_Z14critical_beginv>
    if (fnqueue_count < FNQUEUE_LENGTH)
 738:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <_ZL13fnqueue_count>
 73c:	20 31       	cpi	r18, 0x10	; 16
 73e:	d0 f4       	brcc	.+52     	; 0x774 <_Z11fnqueue_addPFvvE+0x46>
    {
        fnqueue_functions[fnqueue_tail] = function;
 740:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <_ZL12fnqueue_tail>
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	fc 01       	movw	r30, r24
 748:	ee 0f       	add	r30, r30
 74a:	ff 1f       	adc	r31, r31
 74c:	e3 54       	subi	r30, 0x43	; 67
 74e:	fe 4f       	sbci	r31, 0xFE	; 254
 750:	d1 83       	std	Z+1, r29	; 0x01
 752:	c0 83       	st	Z, r28
        fnqueue_tail = (fnqueue_tail + 1) % FNQUEUE_LENGTH;
 754:	01 96       	adiw	r24, 0x01	; 1
 756:	8f 70       	andi	r24, 0x0F	; 15
 758:	90 78       	andi	r25, 0x80	; 128
 75a:	99 23       	and	r25, r25
 75c:	24 f4       	brge	.+8      	; 0x766 <_Z11fnqueue_addPFvvE+0x38>
 75e:	01 97       	sbiw	r24, 0x01	; 1
 760:	80 6f       	ori	r24, 0xF0	; 240
 762:	9f 6f       	ori	r25, 0xFF	; 255
 764:	01 96       	adiw	r24, 0x01	; 1
 766:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <_ZL12fnqueue_tail>
        fnqueue_count++;
 76a:	2f 5f       	subi	r18, 0xFF	; 255
 76c:	20 93 ba 01 	sts	0x01BA, r18	; 0x8001ba <_ZL13fnqueue_count>
        result = true;
 770:	c1 e0       	ldi	r28, 0x01	; 1
 772:	01 c0       	rjmp	.+2      	; 0x776 <_Z11fnqueue_addPFvvE+0x48>
	return 1;
}

bool fnqueue_add(void (*function)(void))
{
	bool result = false;
 774:	c0 e0       	ldi	r28, 0x00	; 0
        fnqueue_functions[fnqueue_tail] = function;
        fnqueue_tail = (fnqueue_tail + 1) % FNQUEUE_LENGTH;
        fnqueue_count++;
        result = true;
    }
    critical_end();
 776:	0e 94 4d 03 	call	0x69a	; 0x69a <_Z12critical_endv>
    return result;
}
 77a:	8c 2f       	mov	r24, r28
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	08 95       	ret

00000782 <_Z13callback_LED1v>:
bool stateLED2 = false;
bool stateLED3 = false;

void callback_LED1(void)
{
	if(stateLED1)
 782:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <stateLED1>
 786:	88 23       	and	r24, r24
 788:	29 f0       	breq	.+10     	; 0x794 <_Z13callback_LED1v+0x12>
		digitalWrite (PIN_LED1,LOW);
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	82 e0       	ldi	r24, 0x02	; 2
 78e:	0e 94 99 01 	call	0x332	; 0x332 <digitalWrite>
 792:	04 c0       	rjmp	.+8      	; 0x79c <_Z13callback_LED1v+0x1a>
	else
		digitalWrite (PIN_LED1,HIGH);
 794:	61 e0       	ldi	r22, 0x01	; 1
 796:	82 e0       	ldi	r24, 0x02	; 2
 798:	0e 94 99 01 	call	0x332	; 0x332 <digitalWrite>
	stateLED1=!stateLED1;
 79c:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <stateLED1>
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	89 27       	eor	r24, r25
 7a4:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <stateLED1>
 7a8:	08 95       	ret

000007aa <_Z13callback_LED2v>:
	//PORTB ^= (1<<PB2);
}

void callback_LED2(void)
{
	if(stateLED2)
 7aa:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <stateLED2>
 7ae:	88 23       	and	r24, r24
 7b0:	29 f0       	breq	.+10     	; 0x7bc <_Z13callback_LED2v+0x12>
		digitalWrite (PIN_LED2,LOW);
 7b2:	60 e0       	ldi	r22, 0x00	; 0
 7b4:	84 e0       	ldi	r24, 0x04	; 4
 7b6:	0e 94 99 01 	call	0x332	; 0x332 <digitalWrite>
 7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <_Z13callback_LED2v+0x1a>
	else
		digitalWrite (PIN_LED2,HIGH);
 7bc:	61 e0       	ldi	r22, 0x01	; 1
 7be:	84 e0       	ldi	r24, 0x04	; 4
 7c0:	0e 94 99 01 	call	0x332	; 0x332 <digitalWrite>
	stateLED2=!stateLED2;
 7c4:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <stateLED2>
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	89 27       	eor	r24, r25
 7cc:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <stateLED2>
 7d0:	08 95       	ret

000007d2 <_Z13callback_LED3v>:
	//PORTB ^= (1<<PB4);
}

void callback_LED3(void)
{
	if(stateLED3)
 7d2:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <stateLED3>
 7d6:	88 23       	and	r24, r24
 7d8:	29 f0       	breq	.+10     	; 0x7e4 <_Z13callback_LED3v+0x12>
		digitalWrite (PIN_LED3,LOW);
 7da:	60 e0       	ldi	r22, 0x00	; 0
 7dc:	87 e0       	ldi	r24, 0x07	; 7
 7de:	0e 94 99 01 	call	0x332	; 0x332 <digitalWrite>
 7e2:	04 c0       	rjmp	.+8      	; 0x7ec <_Z13callback_LED3v+0x1a>
	else
		digitalWrite (PIN_LED3,HIGH);
 7e4:	61 e0       	ldi	r22, 0x01	; 1
 7e6:	87 e0       	ldi	r24, 0x07	; 7
 7e8:	0e 94 99 01 	call	0x332	; 0x332 <digitalWrite>
	stateLED3=!stateLED3;
 7ec:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <stateLED3>
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	89 27       	eor	r24, r25
 7f4:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <stateLED3>
 7f8:	08 95       	ret

000007fa <setup>:
	//PORTB ^= (1<<PB7);
}


void setup()
{
 7fa:	ef 92       	push	r14
 7fc:	ff 92       	push	r15
 7fe:	0f 93       	push	r16
 800:	1f 93       	push	r17
 802:	cf 93       	push	r28
 804:	df 93       	push	r29
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 806:	26 e0       	ldi	r18, 0x06	; 6
 808:	40 e8       	ldi	r20, 0x80	; 128
 80a:	55 e2       	ldi	r21, 0x25	; 37
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	70 e0       	ldi	r23, 0x00	; 0
 810:	82 e1       	ldi	r24, 0x12	; 18
 812:	91 e0       	ldi	r25, 0x01	; 1
 814:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	timer_t *timer_LED1 = timers_new(callback_LED1);
 818:	81 ec       	ldi	r24, 0xC1	; 193
 81a:	93 e0       	ldi	r25, 0x03	; 3
 81c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_Z10timers_newPFvvE>
 820:	7c 01       	movw	r14, r24
	timer_t *timer_LED2 = timers_new(callback_LED2);
 822:	85 ed       	ldi	r24, 0xD5	; 213
 824:	93 e0       	ldi	r25, 0x03	; 3
 826:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_Z10timers_newPFvvE>
 82a:	8c 01       	movw	r16, r24
	timer_t *timer_LED3 = timers_new(callback_LED3);
 82c:	89 ee       	ldi	r24, 0xE9	; 233
 82e:	93 e0       	ldi	r25, 0x03	; 3
 830:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_Z10timers_newPFvvE>
 834:	ec 01       	movw	r28, r24

	pinMode (PIN_LED1,OUTPUT);
 836:	61 e0       	ldi	r22, 0x01	; 1
 838:	82 e0       	ldi	r24, 0x02	; 2
 83a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <pinMode>
	pinMode (PIN_LED2,OUTPUT);
 83e:	61 e0       	ldi	r22, 0x01	; 1
 840:	84 e0       	ldi	r24, 0x04	; 4
 842:	0e 94 e6 01 	call	0x3cc	; 0x3cc <pinMode>
	pinMode (PIN_LED3,OUTPUT);
 846:	61 e0       	ldi	r22, 0x01	; 1
 848:	87 e0       	ldi	r24, 0x07	; 7
 84a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <pinMode>
	//DDRB |= (1<<DDB2);
	//DDRB |= (1<<DDB4);
	//DDRB |= (1<<DDB7);

	timers_start(timer_LED1, F_LED1_CS);
 84e:	62 e3       	ldi	r22, 0x32	; 50
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	c7 01       	movw	r24, r14
 854:	0e 94 0b 05 	call	0xa16	; 0xa16 <_Z12timers_startP5Timerj>
	timers_start(timer_LED2, F_LED2_CS);
 858:	64 e6       	ldi	r22, 0x64	; 100
 85a:	70 e0       	ldi	r23, 0x00	; 0
 85c:	c8 01       	movw	r24, r16
 85e:	0e 94 0b 05 	call	0xa16	; 0xa16 <_Z12timers_startP5Timerj>
	timers_start(timer_LED3, F_LED3_CS);
 862:	68 ec       	ldi	r22, 0xC8	; 200
 864:	70 e0       	ldi	r23, 0x00	; 0
 866:	ce 01       	movw	r24, r28
 868:	0e 94 0b 05 	call	0xa16	; 0xa16 <_Z12timers_startP5Timerj>
}
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	1f 91       	pop	r17
 872:	0f 91       	pop	r16
 874:	ff 90       	pop	r15
 876:	ef 90       	pop	r14
 878:	08 95       	ret

0000087a <loop>:

void loop()
{
	fnqueue_run();
 87a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z11fnqueue_runv>
 87e:	08 95       	ret

00000880 <_Z10timer_initPFvvE>:
static volatile uint16_t count_timer = 0;

void (*timeout_signal) () = NULL;

void timer_init(void (* callback)(void))
{
 880:	cf 93       	push	r28
 882:	df 93       	push	r29
 884:	ec 01       	movw	r28, r24
	critical_begin();
 886:	0e 94 29 03 	call	0x652	; 0x652 <_Z14critical_beginv>
	TCCR2A = 0;// set entire TCCR2A register to 0
 88a:	a0 eb       	ldi	r26, 0xB0	; 176
 88c:	b0 e0       	ldi	r27, 0x00	; 0
 88e:	1c 92       	st	X, r1
	TCCR2B = 0;// same for TCCR2B
 890:	e1 eb       	ldi	r30, 0xB1	; 177
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);  // ctc for timer 0
 896:	8c 91       	ld	r24, X
 898:	82 60       	ori	r24, 0x02	; 2
 89a:	8c 93       	st	X, r24
	TIMSK2 |= (1<<TOIE2); //setea la interrupcion por overflow
 89c:	a0 e7       	ldi	r26, 0x70	; 112
 89e:	b0 e0       	ldi	r27, 0x00	; 0
 8a0:	8c 91       	ld	r24, X
 8a2:	81 60       	ori	r24, 0x01	; 1
 8a4:	8c 93       	st	X, r24
	TCNT2 = 0; //set timer en 0
 8a6:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	TCCR2B |= (1 << CS21) | (1 << CS20);  // CS#1 y CS#0 bits -> Timer2 preescaler = 64
 8aa:	80 81       	ld	r24, Z
 8ac:	83 60       	ori	r24, 0x03	; 3
 8ae:	80 83       	st	Z, r24
	critical_end();
 8b0:	0e 94 4d 03 	call	0x69a	; 0x69a <_Z12critical_endv>

	timeout_signal=callback;
 8b4:	d0 93 e1 01 	sts	0x01E1, r29	; 0x8001e1 <timeout_signal+0x1>
 8b8:	c0 93 e0 01 	sts	0x01E0, r28	; 0x8001e0 <timeout_signal>
	
}
 8bc:	df 91       	pop	r29
 8be:	cf 91       	pop	r28
 8c0:	08 95       	ret

000008c2 <__vector_9>:

ISR(TIMER2_OVF_vect)
{
 8c2:	1f 92       	push	r1
 8c4:	0f 92       	push	r0
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	0f 92       	push	r0
 8ca:	11 24       	eor	r1, r1
 8cc:	2f 93       	push	r18
 8ce:	3f 93       	push	r19
 8d0:	4f 93       	push	r20
 8d2:	5f 93       	push	r21
 8d4:	6f 93       	push	r22
 8d6:	7f 93       	push	r23
 8d8:	8f 93       	push	r24
 8da:	9f 93       	push	r25
 8dc:	af 93       	push	r26
 8de:	bf 93       	push	r27
 8e0:	ef 93       	push	r30
 8e2:	ff 93       	push	r31
	TCNT2 = 0;
 8e4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	count_timer++;
 8e8:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <_ZL11count_timer>
 8ec:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <_ZL11count_timer+0x1>
 8f0:	01 96       	adiw	r24, 0x01	; 1
 8f2:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <_ZL11count_timer+0x1>
 8f6:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <_ZL11count_timer>
	if(count_timer>9) // cuento 10 interrupciones de 1,024ms -> llamo a la funcion de callback cada 10,24ms
 8fa:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <_ZL11count_timer>
 8fe:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <_ZL11count_timer+0x1>
 902:	0a 97       	sbiw	r24, 0x0a	; 10
 904:	50 f0       	brcs	.+20     	; 0x91a <__stack+0x1b>
	{
		count_timer = 0;
 906:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <_ZL11count_timer+0x1>
 90a:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <_ZL11count_timer>
		fnqueue_add(timeout_signal);
 90e:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <timeout_signal>
 912:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <timeout_signal+0x1>
 916:	0e 94 97 03 	call	0x72e	; 0x72e <_Z11fnqueue_addPFvvE>
	}
 91a:	ff 91       	pop	r31
 91c:	ef 91       	pop	r30
 91e:	bf 91       	pop	r27
 920:	af 91       	pop	r26
 922:	9f 91       	pop	r25
 924:	8f 91       	pop	r24
 926:	7f 91       	pop	r23
 928:	6f 91       	pop	r22
 92a:	5f 91       	pop	r21
 92c:	4f 91       	pop	r20
 92e:	3f 91       	pop	r19
 930:	2f 91       	pop	r18
 932:	0f 90       	pop	r0
 934:	0f be       	out	0x3f, r0	; 63
 936:	0f 90       	pop	r0
 938:	1f 90       	pop	r1
 93a:	18 95       	reti

0000093c <_Z14callback_timerv>:
static int index = 0;

static timer_t timers_SW[MAX_TIMERS];

void callback_timer (void)
{
 93c:	ef 92       	push	r14
 93e:	ff 92       	push	r15
 940:	0f 93       	push	r16
 942:	1f 93       	push	r17
 944:	cf 93       	push	r28
 946:	df 93       	push	r29
	// update count_timeout_cs of all timers if OVF -> callback (cont_timeot_cs == timeout_cs)

	int i = 0;
	for (i = 0; i < index; i++)
 948:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <_ZL5index>
 94c:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <_ZL5index+0x1>
 950:	18 16       	cp	r1, r24
 952:	19 06       	cpc	r1, r25
 954:	0c f5       	brge	.+66     	; 0x998 <_Z14callback_timerv+0x5c>
 956:	c4 ee       	ldi	r28, 0xE4	; 228
 958:	d1 e0       	ldi	r29, 0x01	; 1
 95a:	00 e0       	ldi	r16, 0x00	; 0
 95c:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(timers_SW[i].state)
 95e:	8e 81       	ldd	r24, Y+6	; 0x06
 960:	88 23       	and	r24, r24
 962:	81 f0       	breq	.+32     	; 0x984 <_Z14callback_timerv+0x48>
		{
			timers_SW[i].count_timeout_cs++;
 964:	8c 81       	ldd	r24, Y+4	; 0x04
 966:	9d 81       	ldd	r25, Y+5	; 0x05
 968:	01 96       	adiw	r24, 0x01	; 1
 96a:	9d 83       	std	Y+5, r25	; 0x05
 96c:	8c 83       	std	Y+4, r24	; 0x04
			if(timers_SW[i].count_timeout_cs >= timers_SW[i].timeout_cs)
 96e:	2a 81       	ldd	r18, Y+2	; 0x02
 970:	3b 81       	ldd	r19, Y+3	; 0x03
 972:	82 17       	cp	r24, r18
 974:	93 07       	cpc	r25, r19
 976:	30 f0       	brcs	.+12     	; 0x984 <_Z14callback_timerv+0x48>
			{
				fnqueue_add (timers_SW[i].timeout_signal);
 978:	88 81       	ld	r24, Y
 97a:	99 81       	ldd	r25, Y+1	; 0x01
 97c:	0e 94 97 03 	call	0x72e	; 0x72e <_Z11fnqueue_addPFvvE>
				timers_SW[i].count_timeout_cs = 0;
 980:	1d 82       	std	Y+5, r1	; 0x05
 982:	1c 82       	std	Y+4, r1	; 0x04
void callback_timer (void)
{
	// update count_timeout_cs of all timers if OVF -> callback (cont_timeot_cs == timeout_cs)

	int i = 0;
	for (i = 0; i < index; i++)
 984:	0f 5f       	subi	r16, 0xFF	; 255
 986:	1f 4f       	sbci	r17, 0xFF	; 255
 988:	27 96       	adiw	r28, 0x07	; 7
 98a:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <_ZL5index>
 98e:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <_ZL5index+0x1>
 992:	08 17       	cp	r16, r24
 994:	19 07       	cpc	r17, r25
 996:	1c f3       	brlt	.-58     	; 0x95e <_Z14callback_timerv+0x22>
				fnqueue_add (timers_SW[i].timeout_signal);
				timers_SW[i].count_timeout_cs = 0;
			}
		}
	}
}
 998:	df 91       	pop	r29
 99a:	cf 91       	pop	r28
 99c:	1f 91       	pop	r17
 99e:	0f 91       	pop	r16
 9a0:	ff 90       	pop	r15
 9a2:	ef 90       	pop	r14
 9a4:	08 95       	ret

000009a6 <_Z10timers_newPFvvE>:

timer_t *timers_new(void (* timeout_signal)(void))
{
	if(index < MAX_TIMERS)
 9a6:	20 91 54 02 	lds	r18, 0x0254	; 0x800254 <_ZL5index>
 9aa:	30 91 55 02 	lds	r19, 0x0255	; 0x800255 <_ZL5index+0x1>
 9ae:	20 31       	cpi	r18, 0x10	; 16
 9b0:	31 05       	cpc	r19, r1
 9b2:	74 f5       	brge	.+92     	; 0xa10 <_Z10timers_newPFvvE+0x6a>
	{
		timers_SW[index].count_timeout_cs = 0;
 9b4:	f9 01       	movw	r30, r18
 9b6:	ee 0f       	add	r30, r30
 9b8:	ff 1f       	adc	r31, r31
 9ba:	ee 0f       	add	r30, r30
 9bc:	ff 1f       	adc	r31, r31
 9be:	ee 0f       	add	r30, r30
 9c0:	ff 1f       	adc	r31, r31
 9c2:	e2 1b       	sub	r30, r18
 9c4:	f3 0b       	sbc	r31, r19
 9c6:	ec 51       	subi	r30, 0x1C	; 28
 9c8:	fe 4f       	sbci	r31, 0xFE	; 254
 9ca:	15 82       	std	Z+5, r1	; 0x05
 9cc:	14 82       	std	Z+4, r1	; 0x04
		timers_SW[index].state = false;
 9ce:	16 82       	std	Z+6, r1	; 0x06
		timers_SW[index].timeout_cs = 0;
 9d0:	13 82       	std	Z+3, r1	; 0x03
 9d2:	12 82       	std	Z+2, r1	; 0x02
		timers_SW[index].timeout_signal = timeout_signal;
 9d4:	91 83       	std	Z+1, r25	; 0x01
 9d6:	80 83       	st	Z, r24
		if(index == 0)
 9d8:	23 2b       	or	r18, r19
 9da:	21 f4       	brne	.+8      	; 0x9e4 <_Z10timers_newPFvvE+0x3e>
		{
			timer_init(callback_timer);
 9dc:	8e e9       	ldi	r24, 0x9E	; 158
 9de:	94 e0       	ldi	r25, 0x04	; 4
 9e0:	0e 94 40 04 	call	0x880	; 0x880 <_Z10timer_initPFvvE>
		}
		index++;
 9e4:	20 91 54 02 	lds	r18, 0x0254	; 0x800254 <_ZL5index>
 9e8:	30 91 55 02 	lds	r19, 0x0255	; 0x800255 <_ZL5index+0x1>
 9ec:	c9 01       	movw	r24, r18
 9ee:	01 96       	adiw	r24, 0x01	; 1
 9f0:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <_ZL5index+0x1>
 9f4:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <_ZL5index>
		return &timers_SW[index-1];
 9f8:	c9 01       	movw	r24, r18
 9fa:	88 0f       	add	r24, r24
 9fc:	99 1f       	adc	r25, r25
 9fe:	88 0f       	add	r24, r24
 a00:	99 1f       	adc	r25, r25
 a02:	88 0f       	add	r24, r24
 a04:	99 1f       	adc	r25, r25
 a06:	82 1b       	sub	r24, r18
 a08:	93 0b       	sbc	r25, r19
 a0a:	8c 51       	subi	r24, 0x1C	; 28
 a0c:	9e 4f       	sbci	r25, 0xFE	; 254
 a0e:	08 95       	ret
	}
	
	return NULL;
 a10:	80 e0       	ldi	r24, 0x00	; 0
 a12:	90 e0       	ldi	r25, 0x00	; 0
}
 a14:	08 95       	ret

00000a16 <_Z12timers_startP5Timerj>:

bool timers_start(timer_t* timer, uint16_t timeout_cs)
{
 a16:	fc 01       	movw	r30, r24
	timer->timeout_cs = timeout_cs;
 a18:	73 83       	std	Z+3, r23	; 0x03
 a1a:	62 83       	std	Z+2, r22	; 0x02
	timer->count_timeout_cs = 0;
 a1c:	15 82       	std	Z+5, r1	; 0x05
 a1e:	14 82       	std	Z+4, r1	; 0x04
	timer->state = true;
 a20:	81 e0       	ldi	r24, 0x01	; 1
 a22:	86 83       	std	Z+6, r24	; 0x06

	return true;
}
 a24:	08 95       	ret

00000a26 <main>:
 a26:	78 94       	sei
 a28:	84 b5       	in	r24, 0x24	; 36
 a2a:	82 60       	ori	r24, 0x02	; 2
 a2c:	84 bd       	out	0x24, r24	; 36
 a2e:	84 b5       	in	r24, 0x24	; 36
 a30:	81 60       	ori	r24, 0x01	; 1
 a32:	84 bd       	out	0x24, r24	; 36
 a34:	85 b5       	in	r24, 0x25	; 37
 a36:	82 60       	ori	r24, 0x02	; 2
 a38:	85 bd       	out	0x25, r24	; 37
 a3a:	85 b5       	in	r24, 0x25	; 37
 a3c:	81 60       	ori	r24, 0x01	; 1
 a3e:	85 bd       	out	0x25, r24	; 37
 a40:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 a44:	81 60       	ori	r24, 0x01	; 1
 a46:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 a4a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 a4e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 a52:	82 60       	ori	r24, 0x02	; 2
 a54:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 a58:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 a5c:	81 60       	ori	r24, 0x01	; 1
 a5e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 a62:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a66:	81 60       	ori	r24, 0x01	; 1
 a68:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a6c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 a70:	84 60       	ori	r24, 0x04	; 4
 a72:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 a76:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a7a:	81 60       	ori	r24, 0x01	; 1
 a7c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a80:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 a84:	84 60       	ori	r24, 0x04	; 4
 a86:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 a8a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 a8e:	82 60       	ori	r24, 0x02	; 2
 a90:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 a94:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 a98:	81 60       	ori	r24, 0x01	; 1
 a9a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 a9e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 aa2:	80 68       	ori	r24, 0x80	; 128
 aa4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 aa8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 aac:	0e 94 fd 03 	call	0x7fa	; 0x7fa <setup>
 ab0:	0e 94 3d 04 	call	0x87a	; 0x87a <loop>
 ab4:	0e 94 8d 01 	call	0x31a	; 0x31a <_Z14serialEventRunv>
 ab8:	fb cf       	rjmp	.-10     	; 0xab0 <main+0x8a>

00000aba <_GLOBAL__sub_I___vector_18>:
 aba:	e2 e1       	ldi	r30, 0x12	; 18
 abc:	f1 e0       	ldi	r31, 0x01	; 1
 abe:	13 82       	std	Z+3, r1	; 0x03
 ac0:	12 82       	std	Z+2, r1	; 0x02
 ac2:	88 ee       	ldi	r24, 0xE8	; 232
 ac4:	93 e0       	ldi	r25, 0x03	; 3
 ac6:	a0 e0       	ldi	r26, 0x00	; 0
 ac8:	b0 e0       	ldi	r27, 0x00	; 0
 aca:	84 83       	std	Z+4, r24	; 0x04
 acc:	95 83       	std	Z+5, r25	; 0x05
 ace:	a6 83       	std	Z+6, r26	; 0x06
 ad0:	b7 83       	std	Z+7, r27	; 0x07
 ad2:	84 e0       	ldi	r24, 0x04	; 4
 ad4:	91 e0       	ldi	r25, 0x01	; 1
 ad6:	91 83       	std	Z+1, r25	; 0x01
 ad8:	80 83       	st	Z, r24
 ada:	85 ec       	ldi	r24, 0xC5	; 197
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	95 87       	std	Z+13, r25	; 0x0d
 ae0:	84 87       	std	Z+12, r24	; 0x0c
 ae2:	84 ec       	ldi	r24, 0xC4	; 196
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	97 87       	std	Z+15, r25	; 0x0f
 ae8:	86 87       	std	Z+14, r24	; 0x0e
 aea:	80 ec       	ldi	r24, 0xC0	; 192
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	91 8b       	std	Z+17, r25	; 0x11
 af0:	80 8b       	std	Z+16, r24	; 0x10
 af2:	81 ec       	ldi	r24, 0xC1	; 193
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	93 8b       	std	Z+19, r25	; 0x13
 af8:	82 8b       	std	Z+18, r24	; 0x12
 afa:	82 ec       	ldi	r24, 0xC2	; 194
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	95 8b       	std	Z+21, r25	; 0x15
 b00:	84 8b       	std	Z+20, r24	; 0x14
 b02:	86 ec       	ldi	r24, 0xC6	; 198
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	97 8b       	std	Z+23, r25	; 0x17
 b08:	86 8b       	std	Z+22, r24	; 0x16
 b0a:	11 8e       	std	Z+25, r1	; 0x19
 b0c:	12 8e       	std	Z+26, r1	; 0x1a
 b0e:	13 8e       	std	Z+27, r1	; 0x1b
 b10:	14 8e       	std	Z+28, r1	; 0x1c
 b12:	08 95       	ret

00000b14 <__udivmodsi4>:
 b14:	a1 e2       	ldi	r26, 0x21	; 33
 b16:	1a 2e       	mov	r1, r26
 b18:	aa 1b       	sub	r26, r26
 b1a:	bb 1b       	sub	r27, r27
 b1c:	fd 01       	movw	r30, r26
 b1e:	0d c0       	rjmp	.+26     	; 0xb3a <__udivmodsi4_ep>

00000b20 <__udivmodsi4_loop>:
 b20:	aa 1f       	adc	r26, r26
 b22:	bb 1f       	adc	r27, r27
 b24:	ee 1f       	adc	r30, r30
 b26:	ff 1f       	adc	r31, r31
 b28:	a2 17       	cp	r26, r18
 b2a:	b3 07       	cpc	r27, r19
 b2c:	e4 07       	cpc	r30, r20
 b2e:	f5 07       	cpc	r31, r21
 b30:	20 f0       	brcs	.+8      	; 0xb3a <__udivmodsi4_ep>
 b32:	a2 1b       	sub	r26, r18
 b34:	b3 0b       	sbc	r27, r19
 b36:	e4 0b       	sbc	r30, r20
 b38:	f5 0b       	sbc	r31, r21

00000b3a <__udivmodsi4_ep>:
 b3a:	66 1f       	adc	r22, r22
 b3c:	77 1f       	adc	r23, r23
 b3e:	88 1f       	adc	r24, r24
 b40:	99 1f       	adc	r25, r25
 b42:	1a 94       	dec	r1
 b44:	69 f7       	brne	.-38     	; 0xb20 <__udivmodsi4_loop>
 b46:	60 95       	com	r22
 b48:	70 95       	com	r23
 b4a:	80 95       	com	r24
 b4c:	90 95       	com	r25
 b4e:	9b 01       	movw	r18, r22
 b50:	ac 01       	movw	r20, r24
 b52:	bd 01       	movw	r22, r26
 b54:	cf 01       	movw	r24, r30
 b56:	08 95       	ret

00000b58 <__tablejump2__>:
 b58:	ee 0f       	add	r30, r30
 b5a:	ff 1f       	adc	r31, r31
 b5c:	05 90       	lpm	r0, Z+
 b5e:	f4 91       	lpm	r31, Z
 b60:	e0 2d       	mov	r30, r0
 b62:	09 94       	ijmp

00000b64 <abort>:
 b64:	81 e0       	ldi	r24, 0x01	; 1
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	f8 94       	cli
 b6a:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <_exit>

00000b6e <_exit>:
 b6e:	f8 94       	cli

00000b70 <__stop_program>:
 b70:	ff cf       	rjmp	.-2      	; 0xb70 <__stop_program>


Actividad 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f4  00800100  000010aa  0000113e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fb  008001f4  008001f4  00001232  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001232  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003493  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000df4  00000000  00000000  00004957  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013ef  00000000  00000000  0000574b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000588  00000000  00000000  00006b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ecf  00000000  00000000  000070c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002023  00000000  00000000  00007f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00009fb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_16>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 45 03 	jmp	0x68a	; 0x68a <__vector_18>
      4c:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__vector_19>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 43 04 	jmp	0x886	; 0x886 <__vector_21>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	24 00       	.word	0x0024	; ????
      6e:	27 00       	.word	0x0027	; ????
      70:	2a 00       	.word	0x002a	; ????

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <digital_pin_to_port_PGM>:
      7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      8c:	03 03 03 03                                         ....

00000090 <digital_pin_to_bit_mask_PGM>:
      90:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      a0:	04 08 10 20                                         ... 

000000a4 <digital_pin_to_timer_PGM>:
      a4:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      b4:	00 00 00 00                                         ....

000000b8 <__ctors_start>:
      b8:	98 07       	cpc	r25, r24
      ba:	f9 07       	cpc	r31, r25

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	11 e0       	ldi	r17, 0x01	; 1
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	ea ea       	ldi	r30, 0xAA	; 170
      d0:	f0 e1       	ldi	r31, 0x10	; 16
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	a4 3f       	cpi	r26, 0xF4	; 244
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	22 e0       	ldi	r18, 0x02	; 2
      e0:	a4 ef       	ldi	r26, 0xF4	; 244
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	af 3e       	cpi	r26, 0xEF	; 239
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>

000000ee <__do_global_ctors>:
      ee:	10 e0       	ldi	r17, 0x00	; 0
      f0:	ce e5       	ldi	r28, 0x5E	; 94
      f2:	d0 e0       	ldi	r29, 0x00	; 0
      f4:	04 c0       	rjmp	.+8      	; 0xfe <__do_global_ctors+0x10>
      f6:	21 97       	sbiw	r28, 0x01	; 1
      f8:	fe 01       	movw	r30, r28
      fa:	0e 94 26 08 	call	0x104c	; 0x104c <__tablejump2__>
      fe:	cc 35       	cpi	r28, 0x5C	; 92
     100:	d1 07       	cpc	r29, r17
     102:	c9 f7       	brne	.-14     	; 0xf6 <__do_global_ctors+0x8>
     104:	0e 94 af 07 	call	0xf5e	; 0xf5e <main>
     108:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <_ZN14HardwareSerial17availableForWriteEv>:
     110:	fc 01       	movw	r30, r24
     112:	53 8d       	ldd	r21, Z+27	; 0x1b
     114:	44 8d       	ldd	r20, Z+28	; 0x1c
     116:	25 2f       	mov	r18, r21
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	84 2f       	mov	r24, r20
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	82 1b       	sub	r24, r18
     120:	93 0b       	sbc	r25, r19
     122:	54 17       	cp	r21, r20
     124:	10 f0       	brcs	.+4      	; 0x12a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     126:	cf 96       	adiw	r24, 0x3f	; 63
     128:	08 95       	ret
     12a:	01 97       	sbiw	r24, 0x01	; 1
     12c:	08 95       	ret

0000012e <_ZN14HardwareSerial4readEv>:
     12e:	fc 01       	movw	r30, r24
     130:	91 8d       	ldd	r25, Z+25	; 0x19
     132:	82 8d       	ldd	r24, Z+26	; 0x1a
     134:	98 17       	cp	r25, r24
     136:	61 f0       	breq	.+24     	; 0x150 <_ZN14HardwareSerial4readEv+0x22>
     138:	82 8d       	ldd	r24, Z+26	; 0x1a
     13a:	df 01       	movw	r26, r30
     13c:	a8 0f       	add	r26, r24
     13e:	b1 1d       	adc	r27, r1
     140:	5d 96       	adiw	r26, 0x1d	; 29
     142:	8c 91       	ld	r24, X
     144:	92 8d       	ldd	r25, Z+26	; 0x1a
     146:	9f 5f       	subi	r25, 0xFF	; 255
     148:	9f 73       	andi	r25, 0x3F	; 63
     14a:	92 8f       	std	Z+26, r25	; 0x1a
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	08 95       	ret
     150:	8f ef       	ldi	r24, 0xFF	; 255
     152:	9f ef       	ldi	r25, 0xFF	; 255
     154:	08 95       	ret

00000156 <_ZN14HardwareSerial4peekEv>:
     156:	fc 01       	movw	r30, r24
     158:	91 8d       	ldd	r25, Z+25	; 0x19
     15a:	82 8d       	ldd	r24, Z+26	; 0x1a
     15c:	98 17       	cp	r25, r24
     15e:	31 f0       	breq	.+12     	; 0x16c <_ZN14HardwareSerial4peekEv+0x16>
     160:	82 8d       	ldd	r24, Z+26	; 0x1a
     162:	e8 0f       	add	r30, r24
     164:	f1 1d       	adc	r31, r1
     166:	85 8d       	ldd	r24, Z+29	; 0x1d
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	08 95       	ret
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	9f ef       	ldi	r25, 0xFF	; 255
     170:	08 95       	ret

00000172 <_ZN14HardwareSerial9availableEv>:
     172:	fc 01       	movw	r30, r24
     174:	91 8d       	ldd	r25, Z+25	; 0x19
     176:	22 8d       	ldd	r18, Z+26	; 0x1a
     178:	89 2f       	mov	r24, r25
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	80 5c       	subi	r24, 0xC0	; 192
     17e:	9f 4f       	sbci	r25, 0xFF	; 255
     180:	82 1b       	sub	r24, r18
     182:	91 09       	sbc	r25, r1
     184:	8f 73       	andi	r24, 0x3F	; 63
     186:	99 27       	eor	r25, r25
     188:	08 95       	ret

0000018a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
     18a:	fc 01       	movw	r30, r24
     18c:	84 8d       	ldd	r24, Z+28	; 0x1c
     18e:	df 01       	movw	r26, r30
     190:	a8 0f       	add	r26, r24
     192:	b1 1d       	adc	r27, r1
     194:	a3 5a       	subi	r26, 0xA3	; 163
     196:	bf 4f       	sbci	r27, 0xFF	; 255
     198:	2c 91       	ld	r18, X
     19a:	84 8d       	ldd	r24, Z+28	; 0x1c
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	01 96       	adiw	r24, 0x01	; 1
     1a0:	8f 73       	andi	r24, 0x3F	; 63
     1a2:	99 27       	eor	r25, r25
     1a4:	84 8f       	std	Z+28, r24	; 0x1c
     1a6:	a6 89       	ldd	r26, Z+22	; 0x16
     1a8:	b7 89       	ldd	r27, Z+23	; 0x17
     1aa:	2c 93       	st	X, r18
     1ac:	a0 89       	ldd	r26, Z+16	; 0x10
     1ae:	b1 89       	ldd	r27, Z+17	; 0x11
     1b0:	8c 91       	ld	r24, X
     1b2:	83 70       	andi	r24, 0x03	; 3
     1b4:	80 64       	ori	r24, 0x40	; 64
     1b6:	8c 93       	st	X, r24
     1b8:	93 8d       	ldd	r25, Z+27	; 0x1b
     1ba:	84 8d       	ldd	r24, Z+28	; 0x1c
     1bc:	98 13       	cpse	r25, r24
     1be:	06 c0       	rjmp	.+12     	; 0x1cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
     1c0:	02 88       	ldd	r0, Z+18	; 0x12
     1c2:	f3 89       	ldd	r31, Z+19	; 0x13
     1c4:	e0 2d       	mov	r30, r0
     1c6:	80 81       	ld	r24, Z
     1c8:	8f 7d       	andi	r24, 0xDF	; 223
     1ca:	80 83       	st	Z, r24
     1cc:	08 95       	ret

000001ce <_ZN14HardwareSerial5writeEh>:
     1ce:	ef 92       	push	r14
     1d0:	ff 92       	push	r15
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	ec 01       	movw	r28, r24
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	88 8f       	std	Y+24, r24	; 0x18
     1e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     1e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     1e4:	98 13       	cpse	r25, r24
     1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <_ZN14HardwareSerial5writeEh+0x24>
     1e8:	e8 89       	ldd	r30, Y+16	; 0x10
     1ea:	f9 89       	ldd	r31, Y+17	; 0x11
     1ec:	80 81       	ld	r24, Z
     1ee:	85 fd       	sbrc	r24, 5
     1f0:	26 c0       	rjmp	.+76     	; 0x23e <_ZN14HardwareSerial5writeEh+0x70>
     1f2:	f6 2e       	mov	r15, r22
     1f4:	0b 8d       	ldd	r16, Y+27	; 0x1b
     1f6:	10 e0       	ldi	r17, 0x00	; 0
     1f8:	0f 5f       	subi	r16, 0xFF	; 255
     1fa:	1f 4f       	sbci	r17, 0xFF	; 255
     1fc:	0f 73       	andi	r16, 0x3F	; 63
     1fe:	11 27       	eor	r17, r17
     200:	e0 2e       	mov	r14, r16
     202:	8c 8d       	ldd	r24, Y+28	; 0x1c
     204:	e8 12       	cpse	r14, r24
     206:	0c c0       	rjmp	.+24     	; 0x220 <_ZN14HardwareSerial5writeEh+0x52>
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	07 fc       	sbrc	r0, 7
     20c:	fa cf       	rjmp	.-12     	; 0x202 <_ZN14HardwareSerial5writeEh+0x34>
     20e:	e8 89       	ldd	r30, Y+16	; 0x10
     210:	f9 89       	ldd	r31, Y+17	; 0x11
     212:	80 81       	ld	r24, Z
     214:	85 ff       	sbrs	r24, 5
     216:	f5 cf       	rjmp	.-22     	; 0x202 <_ZN14HardwareSerial5writeEh+0x34>
     218:	ce 01       	movw	r24, r28
     21a:	0e 94 c5 00 	call	0x18a	; 0x18a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     21e:	f1 cf       	rjmp	.-30     	; 0x202 <_ZN14HardwareSerial5writeEh+0x34>
     220:	8b 8d       	ldd	r24, Y+27	; 0x1b
     222:	fe 01       	movw	r30, r28
     224:	e8 0f       	add	r30, r24
     226:	f1 1d       	adc	r31, r1
     228:	e3 5a       	subi	r30, 0xA3	; 163
     22a:	ff 4f       	sbci	r31, 0xFF	; 255
     22c:	f0 82       	st	Z, r15
     22e:	9f b7       	in	r25, 0x3f	; 63
     230:	f8 94       	cli
     232:	0b 8f       	std	Y+27, r16	; 0x1b
     234:	ea 89       	ldd	r30, Y+18	; 0x12
     236:	fb 89       	ldd	r31, Y+19	; 0x13
     238:	80 81       	ld	r24, Z
     23a:	80 62       	ori	r24, 0x20	; 32
     23c:	0a c0       	rjmp	.+20     	; 0x252 <_ZN14HardwareSerial5writeEh+0x84>
     23e:	9f b7       	in	r25, 0x3f	; 63
     240:	f8 94       	cli
     242:	ee 89       	ldd	r30, Y+22	; 0x16
     244:	ff 89       	ldd	r31, Y+23	; 0x17
     246:	60 83       	st	Z, r22
     248:	e8 89       	ldd	r30, Y+16	; 0x10
     24a:	f9 89       	ldd	r31, Y+17	; 0x11
     24c:	80 81       	ld	r24, Z
     24e:	83 70       	andi	r24, 0x03	; 3
     250:	80 64       	ori	r24, 0x40	; 64
     252:	80 83       	st	Z, r24
     254:	9f bf       	out	0x3f, r25	; 63
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	ff 90       	pop	r15
     264:	ef 90       	pop	r14
     266:	08 95       	ret

00000268 <_ZN14HardwareSerial5flushEv>:
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	ec 01       	movw	r28, r24
     26e:	88 8d       	ldd	r24, Y+24	; 0x18
     270:	88 23       	and	r24, r24
     272:	c9 f0       	breq	.+50     	; 0x2a6 <_ZN14HardwareSerial5flushEv+0x3e>
     274:	ea 89       	ldd	r30, Y+18	; 0x12
     276:	fb 89       	ldd	r31, Y+19	; 0x13
     278:	80 81       	ld	r24, Z
     27a:	85 fd       	sbrc	r24, 5
     27c:	05 c0       	rjmp	.+10     	; 0x288 <_ZN14HardwareSerial5flushEv+0x20>
     27e:	a8 89       	ldd	r26, Y+16	; 0x10
     280:	b9 89       	ldd	r27, Y+17	; 0x11
     282:	8c 91       	ld	r24, X
     284:	86 fd       	sbrc	r24, 6
     286:	0f c0       	rjmp	.+30     	; 0x2a6 <_ZN14HardwareSerial5flushEv+0x3e>
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	07 fc       	sbrc	r0, 7
     28c:	f5 cf       	rjmp	.-22     	; 0x278 <_ZN14HardwareSerial5flushEv+0x10>
     28e:	80 81       	ld	r24, Z
     290:	85 ff       	sbrs	r24, 5
     292:	f2 cf       	rjmp	.-28     	; 0x278 <_ZN14HardwareSerial5flushEv+0x10>
     294:	a8 89       	ldd	r26, Y+16	; 0x10
     296:	b9 89       	ldd	r27, Y+17	; 0x11
     298:	8c 91       	ld	r24, X
     29a:	85 ff       	sbrs	r24, 5
     29c:	ed cf       	rjmp	.-38     	; 0x278 <_ZN14HardwareSerial5flushEv+0x10>
     29e:	ce 01       	movw	r24, r28
     2a0:	0e 94 c5 00 	call	0x18a	; 0x18a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     2a4:	e7 cf       	rjmp	.-50     	; 0x274 <_ZN14HardwareSerial5flushEv+0xc>
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	08 95       	ret

000002ac <_Z17Serial0_availablev>:
     2ac:	84 ef       	ldi	r24, 0xF4	; 244
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	0e 94 b9 00 	call	0x172	; 0x172 <_ZN14HardwareSerial9availableEv>
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	89 2b       	or	r24, r25
     2b8:	09 f4       	brne	.+2      	; 0x2bc <_Z17Serial0_availablev+0x10>
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	82 2f       	mov	r24, r18
     2be:	08 95       	ret

000002c0 <_Z14serialEventRunv>:
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	89 2b       	or	r24, r25
     2c6:	29 f0       	breq	.+10     	; 0x2d2 <_Z14serialEventRunv+0x12>
     2c8:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z17Serial0_availablev>
     2cc:	81 11       	cpse	r24, r1
     2ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     2d2:	08 95       	ret

000002d4 <_ZN5Print5writeEPKhj>:
     2d4:	cf 92       	push	r12
     2d6:	df 92       	push	r13
     2d8:	ef 92       	push	r14
     2da:	ff 92       	push	r15
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	6c 01       	movw	r12, r24
     2e6:	7a 01       	movw	r14, r20
     2e8:	8b 01       	movw	r16, r22
     2ea:	c0 e0       	ldi	r28, 0x00	; 0
     2ec:	d0 e0       	ldi	r29, 0x00	; 0
     2ee:	ce 15       	cp	r28, r14
     2f0:	df 05       	cpc	r29, r15
     2f2:	81 f0       	breq	.+32     	; 0x314 <_ZN5Print5writeEPKhj+0x40>
     2f4:	d8 01       	movw	r26, r16
     2f6:	6d 91       	ld	r22, X+
     2f8:	8d 01       	movw	r16, r26
     2fa:	d6 01       	movw	r26, r12
     2fc:	ed 91       	ld	r30, X+
     2fe:	fc 91       	ld	r31, X
     300:	01 90       	ld	r0, Z+
     302:	f0 81       	ld	r31, Z
     304:	e0 2d       	mov	r30, r0
     306:	c6 01       	movw	r24, r12
     308:	09 95       	icall
     30a:	89 2b       	or	r24, r25
     30c:	11 f0       	breq	.+4      	; 0x312 <_ZN5Print5writeEPKhj+0x3e>
     30e:	21 96       	adiw	r28, 0x01	; 1
     310:	ee cf       	rjmp	.-36     	; 0x2ee <_ZN5Print5writeEPKhj+0x1a>
     312:	7e 01       	movw	r14, r28
     314:	c7 01       	movw	r24, r14
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	1f 91       	pop	r17
     31c:	0f 91       	pop	r16
     31e:	ff 90       	pop	r15
     320:	ef 90       	pop	r14
     322:	df 90       	pop	r13
     324:	cf 90       	pop	r12
     326:	08 95       	ret

00000328 <_ZN5Print5writeEPKc.constprop.8>:
     328:	61 15       	cp	r22, r1
     32a:	71 05       	cpc	r23, r1
     32c:	79 f0       	breq	.+30     	; 0x34c <_ZN5Print5writeEPKc.constprop.8+0x24>
     32e:	fb 01       	movw	r30, r22
     330:	01 90       	ld	r0, Z+
     332:	00 20       	and	r0, r0
     334:	e9 f7       	brne	.-6      	; 0x330 <_ZN5Print5writeEPKc.constprop.8+0x8>
     336:	31 97       	sbiw	r30, 0x01	; 1
     338:	af 01       	movw	r20, r30
     33a:	46 1b       	sub	r20, r22
     33c:	57 0b       	sbc	r21, r23
     33e:	dc 01       	movw	r26, r24
     340:	ed 91       	ld	r30, X+
     342:	fc 91       	ld	r31, X
     344:	02 80       	ldd	r0, Z+2	; 0x02
     346:	f3 81       	ldd	r31, Z+3	; 0x03
     348:	e0 2d       	mov	r30, r0
     34a:	09 94       	ijmp
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	08 95       	ret

00000352 <_ZN5Print11printNumberEmh.constprop.5>:
     352:	8f 92       	push	r8
     354:	9f 92       	push	r9
     356:	af 92       	push	r10
     358:	bf 92       	push	r11
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	a1 97       	sbiw	r28, 0x21	; 33
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	f8 94       	cli
     370:	de bf       	out	0x3e, r29	; 62
     372:	0f be       	out	0x3f, r0	; 63
     374:	cd bf       	out	0x3d, r28	; 61
     376:	7c 01       	movw	r14, r24
     378:	fa 01       	movw	r30, r20
     37a:	cb 01       	movw	r24, r22
     37c:	19 a2       	std	Y+33, r1	; 0x21
     37e:	22 30       	cpi	r18, 0x02	; 2
     380:	08 f4       	brcc	.+2      	; 0x384 <_ZN5Print11printNumberEmh.constprop.5+0x32>
     382:	2a e0       	ldi	r18, 0x0A	; 10
     384:	8e 01       	movw	r16, r28
     386:	0f 5d       	subi	r16, 0xDF	; 223
     388:	1f 4f       	sbci	r17, 0xFF	; 255
     38a:	82 2e       	mov	r8, r18
     38c:	91 2c       	mov	r9, r1
     38e:	a1 2c       	mov	r10, r1
     390:	b1 2c       	mov	r11, r1
     392:	bf 01       	movw	r22, r30
     394:	a5 01       	movw	r20, r10
     396:	94 01       	movw	r18, r8
     398:	0e 94 2c 08 	call	0x1058	; 0x1058 <__udivmodsi4>
     39c:	f9 01       	movw	r30, r18
     39e:	ca 01       	movw	r24, r20
     3a0:	01 50       	subi	r16, 0x01	; 1
     3a2:	11 09       	sbc	r17, r1
     3a4:	6a 30       	cpi	r22, 0x0A	; 10
     3a6:	14 f4       	brge	.+4      	; 0x3ac <_ZN5Print11printNumberEmh.constprop.5+0x5a>
     3a8:	60 5d       	subi	r22, 0xD0	; 208
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <_ZN5Print11printNumberEmh.constprop.5+0x5c>
     3ac:	69 5c       	subi	r22, 0xC9	; 201
     3ae:	d8 01       	movw	r26, r16
     3b0:	6c 93       	st	X, r22
     3b2:	23 2b       	or	r18, r19
     3b4:	24 2b       	or	r18, r20
     3b6:	25 2b       	or	r18, r21
     3b8:	61 f7       	brne	.-40     	; 0x392 <_ZN5Print11printNumberEmh.constprop.5+0x40>
     3ba:	b8 01       	movw	r22, r16
     3bc:	c7 01       	movw	r24, r14
     3be:	0e 94 94 01 	call	0x328	; 0x328 <_ZN5Print5writeEPKc.constprop.8>
     3c2:	a1 96       	adiw	r28, 0x21	; 33
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	1f 91       	pop	r17
     3d4:	0f 91       	pop	r16
     3d6:	ff 90       	pop	r15
     3d8:	ef 90       	pop	r14
     3da:	bf 90       	pop	r11
     3dc:	af 90       	pop	r10
     3de:	9f 90       	pop	r9
     3e0:	8f 90       	pop	r8
     3e2:	08 95       	ret

000003e4 <__cxa_pure_virtual>:
     3e4:	0e 94 4e 08 	call	0x109c	; 0x109c <abort>

000003e8 <digitalWrite>:
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	fc 01       	movw	r30, r24
     3ec:	ec 55       	subi	r30, 0x5C	; 92
     3ee:	ff 4f       	sbci	r31, 0xFF	; 255
     3f0:	24 91       	lpm	r18, Z
     3f2:	fc 01       	movw	r30, r24
     3f4:	e0 57       	subi	r30, 0x70	; 112
     3f6:	ff 4f       	sbci	r31, 0xFF	; 255
     3f8:	34 91       	lpm	r19, Z
     3fa:	fc 01       	movw	r30, r24
     3fc:	e4 58       	subi	r30, 0x84	; 132
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	e4 91       	lpm	r30, Z
     402:	ee 23       	and	r30, r30
     404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     406:	3c c0       	rjmp	.+120    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     408:	22 23       	and	r18, r18
     40a:	39 f1       	breq	.+78     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     40c:	23 30       	cpi	r18, 0x03	; 3
     40e:	91 f0       	breq	.+36     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     410:	38 f4       	brcc	.+14     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     412:	21 30       	cpi	r18, 0x01	; 1
     414:	a9 f0       	breq	.+42     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     416:	22 30       	cpi	r18, 0x02	; 2
     418:	01 f5       	brne	.+64     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     41a:	84 b5       	in	r24, 0x24	; 36
     41c:	8f 7d       	andi	r24, 0xDF	; 223
     41e:	12 c0       	rjmp	.+36     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     420:	27 30       	cpi	r18, 0x07	; 7
     422:	91 f0       	breq	.+36     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     424:	28 30       	cpi	r18, 0x08	; 8
     426:	a1 f0       	breq	.+40     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     428:	24 30       	cpi	r18, 0x04	; 4
     42a:	b9 f4       	brne	.+46     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     42c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     430:	8f 7d       	andi	r24, 0xDF	; 223
     432:	03 c0       	rjmp	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     434:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     438:	8f 77       	andi	r24, 0x7F	; 127
     43a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     43e:	0d c0       	rjmp	.+26     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     440:	84 b5       	in	r24, 0x24	; 36
     442:	8f 77       	andi	r24, 0x7F	; 127
     444:	84 bd       	out	0x24, r24	; 36
     446:	09 c0       	rjmp	.+18     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     448:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     44c:	8f 77       	andi	r24, 0x7F	; 127
     44e:	03 c0       	rjmp	.+6      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     450:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     454:	8f 7d       	andi	r24, 0xDF	; 223
     456:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	ee 0f       	add	r30, r30
     45e:	ff 1f       	adc	r31, r31
     460:	ee 58       	subi	r30, 0x8E	; 142
     462:	ff 4f       	sbci	r31, 0xFF	; 255
     464:	a5 91       	lpm	r26, Z+
     466:	b4 91       	lpm	r27, Z
     468:	9f b7       	in	r25, 0x3f	; 63
     46a:	f8 94       	cli
     46c:	61 11       	cpse	r22, r1
     46e:	04 c0       	rjmp	.+8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     470:	8c 91       	ld	r24, X
     472:	30 95       	com	r19
     474:	38 23       	and	r19, r24
     476:	02 c0       	rjmp	.+4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     478:	ec 91       	ld	r30, X
     47a:	3e 2b       	or	r19, r30
     47c:	3c 93       	st	X, r19
     47e:	9f bf       	out	0x3f, r25	; 63
     480:	08 95       	ret

00000482 <pinMode>:
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	fc 01       	movw	r30, r24
     48a:	e0 57       	subi	r30, 0x70	; 112
     48c:	ff 4f       	sbci	r31, 0xFF	; 255
     48e:	24 91       	lpm	r18, Z
     490:	fc 01       	movw	r30, r24
     492:	e4 58       	subi	r30, 0x84	; 132
     494:	ff 4f       	sbci	r31, 0xFF	; 255
     496:	84 91       	lpm	r24, Z
     498:	88 23       	and	r24, r24
     49a:	61 f1       	breq	.+88     	; 0x4f4 <pinMode+0x72>
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	88 0f       	add	r24, r24
     4a0:	99 1f       	adc	r25, r25
     4a2:	fc 01       	movw	r30, r24
     4a4:	e8 59       	subi	r30, 0x98	; 152
     4a6:	ff 4f       	sbci	r31, 0xFF	; 255
     4a8:	c5 91       	lpm	r28, Z+
     4aa:	d4 91       	lpm	r29, Z
     4ac:	fc 01       	movw	r30, r24
     4ae:	ee 58       	subi	r30, 0x8E	; 142
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	a5 91       	lpm	r26, Z+
     4b4:	b4 91       	lpm	r27, Z
     4b6:	61 11       	cpse	r22, r1
     4b8:	09 c0       	rjmp	.+18     	; 0x4cc <pinMode+0x4a>
     4ba:	9f b7       	in	r25, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	88 81       	ld	r24, Y
     4c0:	20 95       	com	r18
     4c2:	82 23       	and	r24, r18
     4c4:	88 83       	st	Y, r24
     4c6:	ec 91       	ld	r30, X
     4c8:	2e 23       	and	r18, r30
     4ca:	0b c0       	rjmp	.+22     	; 0x4e2 <pinMode+0x60>
     4cc:	62 30       	cpi	r22, 0x02	; 2
     4ce:	61 f4       	brne	.+24     	; 0x4e8 <pinMode+0x66>
     4d0:	9f b7       	in	r25, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	88 81       	ld	r24, Y
     4d6:	32 2f       	mov	r19, r18
     4d8:	30 95       	com	r19
     4da:	83 23       	and	r24, r19
     4dc:	88 83       	st	Y, r24
     4de:	ec 91       	ld	r30, X
     4e0:	2e 2b       	or	r18, r30
     4e2:	2c 93       	st	X, r18
     4e4:	9f bf       	out	0x3f, r25	; 63
     4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <pinMode+0x72>
     4e8:	8f b7       	in	r24, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	e8 81       	ld	r30, Y
     4ee:	2e 2b       	or	r18, r30
     4f0:	28 83       	st	Y, r18
     4f2:	8f bf       	out	0x3f, r24	; 63
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <delayMicroseconds>:
     4fa:	82 30       	cpi	r24, 0x02	; 2
     4fc:	91 05       	cpc	r25, r1
     4fe:	38 f0       	brcs	.+14     	; 0x50e <delayMicroseconds+0x14>
     500:	88 0f       	add	r24, r24
     502:	99 1f       	adc	r25, r25
     504:	88 0f       	add	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	05 97       	sbiw	r24, 0x05	; 5
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <delayMicroseconds+0x10>
     50e:	08 95       	ret

00000510 <__vector_16>:
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	2f 93       	push	r18
     51c:	3f 93       	push	r19
     51e:	8f 93       	push	r24
     520:	9f 93       	push	r25
     522:	af 93       	push	r26
     524:	bf 93       	push	r27
     526:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <timer0_millis>
     52a:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <timer0_millis+0x1>
     52e:	a0 91 98 02 	lds	r26, 0x0298	; 0x800298 <timer0_millis+0x2>
     532:	b0 91 99 02 	lds	r27, 0x0299	; 0x800299 <timer0_millis+0x3>
     536:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <timer0_fract>
     53a:	23 e0       	ldi	r18, 0x03	; 3
     53c:	23 0f       	add	r18, r19
     53e:	2d 37       	cpi	r18, 0x7D	; 125
     540:	20 f4       	brcc	.+8      	; 0x54a <__vector_16+0x3a>
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	a1 1d       	adc	r26, r1
     546:	b1 1d       	adc	r27, r1
     548:	05 c0       	rjmp	.+10     	; 0x554 <__vector_16+0x44>
     54a:	26 e8       	ldi	r18, 0x86	; 134
     54c:	23 0f       	add	r18, r19
     54e:	02 96       	adiw	r24, 0x02	; 2
     550:	a1 1d       	adc	r26, r1
     552:	b1 1d       	adc	r27, r1
     554:	20 93 95 02 	sts	0x0295, r18	; 0x800295 <timer0_fract>
     558:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <timer0_millis>
     55c:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <timer0_millis+0x1>
     560:	a0 93 98 02 	sts	0x0298, r26	; 0x800298 <timer0_millis+0x2>
     564:	b0 93 99 02 	sts	0x0299, r27	; 0x800299 <timer0_millis+0x3>
     568:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <timer0_overflow_count>
     56c:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <timer0_overflow_count+0x1>
     570:	a0 91 93 02 	lds	r26, 0x0293	; 0x800293 <timer0_overflow_count+0x2>
     574:	b0 91 94 02 	lds	r27, 0x0294	; 0x800294 <timer0_overflow_count+0x3>
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	a1 1d       	adc	r26, r1
     57c:	b1 1d       	adc	r27, r1
     57e:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <timer0_overflow_count>
     582:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <timer0_overflow_count+0x1>
     586:	a0 93 93 02 	sts	0x0293, r26	; 0x800293 <timer0_overflow_count+0x2>
     58a:	b0 93 94 02 	sts	0x0294, r27	; 0x800294 <timer0_overflow_count+0x3>
     58e:	bf 91       	pop	r27
     590:	af 91       	pop	r26
     592:	9f 91       	pop	r25
     594:	8f 91       	pop	r24
     596:	3f 91       	pop	r19
     598:	2f 91       	pop	r18
     59a:	0f 90       	pop	r0
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	0f 90       	pop	r0
     5a0:	1f 90       	pop	r1
     5a2:	18 95       	reti

000005a4 <_ZN5Print7printlnEii>:
     5a4:	cf 92       	push	r12
     5a6:	df 92       	push	r13
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	ec 01       	movw	r28, r24
     5b6:	41 15       	cp	r20, r1
     5b8:	51 05       	cpc	r21, r1
     5ba:	39 f4       	brne	.+14     	; 0x5ca <_ZN5Print7printlnEii+0x26>
     5bc:	e8 81       	ld	r30, Y
     5be:	f9 81       	ldd	r31, Y+1	; 0x01
     5c0:	01 90       	ld	r0, Z+
     5c2:	f0 81       	ld	r31, Z
     5c4:	e0 2d       	mov	r30, r0
     5c6:	09 95       	icall
     5c8:	27 c0       	rjmp	.+78     	; 0x618 <_ZN5Print7printlnEii+0x74>
     5ca:	6b 01       	movw	r12, r22
     5cc:	77 0f       	add	r23, r23
     5ce:	ee 08       	sbc	r14, r14
     5d0:	ff 08       	sbc	r15, r15
     5d2:	4a 30       	cpi	r20, 0x0A	; 10
     5d4:	51 05       	cpc	r21, r1
     5d6:	d1 f4       	brne	.+52     	; 0x60c <_ZN5Print7printlnEii+0x68>
     5d8:	f7 fe       	sbrs	r15, 7
     5da:	16 c0       	rjmp	.+44     	; 0x608 <_ZN5Print7printlnEii+0x64>
     5dc:	e8 81       	ld	r30, Y
     5de:	f9 81       	ldd	r31, Y+1	; 0x01
     5e0:	01 90       	ld	r0, Z+
     5e2:	f0 81       	ld	r31, Z
     5e4:	e0 2d       	mov	r30, r0
     5e6:	6d e2       	ldi	r22, 0x2D	; 45
     5e8:	09 95       	icall
     5ea:	8c 01       	movw	r16, r24
     5ec:	44 27       	eor	r20, r20
     5ee:	55 27       	eor	r21, r21
     5f0:	ba 01       	movw	r22, r20
     5f2:	4c 19       	sub	r20, r12
     5f4:	5d 09       	sbc	r21, r13
     5f6:	6e 09       	sbc	r22, r14
     5f8:	7f 09       	sbc	r23, r15
     5fa:	2a e0       	ldi	r18, 0x0A	; 10
     5fc:	ce 01       	movw	r24, r28
     5fe:	0e 94 a9 01 	call	0x352	; 0x352 <_ZN5Print11printNumberEmh.constprop.5>
     602:	08 0f       	add	r16, r24
     604:	19 1f       	adc	r17, r25
     606:	09 c0       	rjmp	.+18     	; 0x61a <_ZN5Print7printlnEii+0x76>
     608:	2a e0       	ldi	r18, 0x0A	; 10
     60a:	01 c0       	rjmp	.+2      	; 0x60e <_ZN5Print7printlnEii+0x6a>
     60c:	24 2f       	mov	r18, r20
     60e:	b7 01       	movw	r22, r14
     610:	a6 01       	movw	r20, r12
     612:	ce 01       	movw	r24, r28
     614:	0e 94 a9 01 	call	0x352	; 0x352 <_ZN5Print11printNumberEmh.constprop.5>
     618:	8c 01       	movw	r16, r24
     61a:	60 ef       	ldi	r22, 0xF0	; 240
     61c:	71 e0       	ldi	r23, 0x01	; 1
     61e:	ce 01       	movw	r24, r28
     620:	0e 94 94 01 	call	0x328	; 0x328 <_ZN5Print5writeEPKc.constprop.8>
     624:	80 0f       	add	r24, r16
     626:	91 1f       	adc	r25, r17
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	ff 90       	pop	r15
     632:	ef 90       	pop	r14
     634:	df 90       	pop	r13
     636:	cf 90       	pop	r12
     638:	08 95       	ret

0000063a <_ZN5Print5printEPKc>:
     63a:	0c 94 94 01 	jmp	0x328	; 0x328 <_ZN5Print5writeEPKc.constprop.8>

0000063e <__vector_19>:
     63e:	1f 92       	push	r1
     640:	0f 92       	push	r0
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	0f 92       	push	r0
     646:	11 24       	eor	r1, r1
     648:	2f 93       	push	r18
     64a:	3f 93       	push	r19
     64c:	4f 93       	push	r20
     64e:	5f 93       	push	r21
     650:	6f 93       	push	r22
     652:	7f 93       	push	r23
     654:	8f 93       	push	r24
     656:	9f 93       	push	r25
     658:	af 93       	push	r26
     65a:	bf 93       	push	r27
     65c:	ef 93       	push	r30
     65e:	ff 93       	push	r31
     660:	84 ef       	ldi	r24, 0xF4	; 244
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	0e 94 c5 00 	call	0x18a	; 0x18a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     668:	ff 91       	pop	r31
     66a:	ef 91       	pop	r30
     66c:	bf 91       	pop	r27
     66e:	af 91       	pop	r26
     670:	9f 91       	pop	r25
     672:	8f 91       	pop	r24
     674:	7f 91       	pop	r23
     676:	6f 91       	pop	r22
     678:	5f 91       	pop	r21
     67a:	4f 91       	pop	r20
     67c:	3f 91       	pop	r19
     67e:	2f 91       	pop	r18
     680:	0f 90       	pop	r0
     682:	0f be       	out	0x3f, r0	; 63
     684:	0f 90       	pop	r0
     686:	1f 90       	pop	r1
     688:	18 95       	reti

0000068a <__vector_18>:
     68a:	1f 92       	push	r1
     68c:	0f 92       	push	r0
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	0f 92       	push	r0
     692:	11 24       	eor	r1, r1
     694:	2f 93       	push	r18
     696:	8f 93       	push	r24
     698:	9f 93       	push	r25
     69a:	ef 93       	push	r30
     69c:	ff 93       	push	r31
     69e:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <__data_end+0x10>
     6a2:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <__data_end+0x11>
     6a6:	80 81       	ld	r24, Z
     6a8:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__data_end+0x16>
     6ac:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__data_end+0x17>
     6b0:	82 fd       	sbrc	r24, 2
     6b2:	12 c0       	rjmp	.+36     	; 0x6d8 <__vector_18+0x4e>
     6b4:	90 81       	ld	r25, Z
     6b6:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <__data_end+0x19>
     6ba:	8f 5f       	subi	r24, 0xFF	; 255
     6bc:	8f 73       	andi	r24, 0x3F	; 63
     6be:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <__data_end+0x1a>
     6c2:	82 17       	cp	r24, r18
     6c4:	51 f0       	breq	.+20     	; 0x6da <__vector_18+0x50>
     6c6:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <__data_end+0x19>
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	ec 50       	subi	r30, 0x0C	; 12
     6ce:	fe 4f       	sbci	r31, 0xFE	; 254
     6d0:	95 8f       	std	Z+29, r25	; 0x1d
     6d2:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <__data_end+0x19>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__vector_18+0x50>
     6d8:	80 81       	ld	r24, Z
     6da:	ff 91       	pop	r31
     6dc:	ef 91       	pop	r30
     6de:	9f 91       	pop	r25
     6e0:	8f 91       	pop	r24
     6e2:	2f 91       	pop	r18
     6e4:	0f 90       	pop	r0
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	0f 90       	pop	r0
     6ea:	1f 90       	pop	r1
     6ec:	18 95       	reti

000006ee <_Z14critical_beginv>:
    // módulo de región crítica. Esto puede suceder cuando se está ejecutando
    // una rutina de interrupción. En este caso, no deshabilitar las
    // interrupciones

    // Lectura atómica del registro
    uint8_t status_register = SREG;
     6ee:	2f b7       	in	r18, 0x3f	; 63
    cli();
     6f0:	f8 94       	cli

    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if (((anidamiento == 0) && ((status_register & (0x80)) != 0)) || ((anidamiento != 0) && ((status_register & (0x80)) == 0)))
     6f2:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <_ZL11anidamiento>
     6f6:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <_ZL11anidamiento+0x1>
     6fa:	89 2b       	or	r24, r25
     6fc:	19 f4       	brne	.+6      	; 0x704 <_Z14critical_beginv+0x16>
     6fe:	22 23       	and	r18, r18
     700:	9c f4       	brge	.+38     	; 0x728 <_Z14critical_beginv+0x3a>
     702:	08 c0       	rjmp	.+16     	; 0x714 <_Z14critical_beginv+0x26>
     704:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <_ZL11anidamiento>
     708:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <_ZL11anidamiento+0x1>
     70c:	89 2b       	or	r24, r25
     70e:	91 f0       	breq	.+36     	; 0x734 <_Z14critical_beginv+0x46>
     710:	22 23       	and	r18, r18
     712:	84 f0       	brlt	.+32     	; 0x734 <_Z14critical_beginv+0x46>
    {
        anidamiento++;
     714:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <_ZL11anidamiento>
     718:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <_ZL11anidamiento+0x1>
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <_ZL11anidamiento+0x1>
     722:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <_ZL11anidamiento>
     726:	08 95       	ret

    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if (((anidamiento == 0) && ((status_register & (0x80)) != 0)) || ((anidamiento != 0) && ((status_register & (0x80)) == 0)))
     728:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <_ZL11anidamiento>
     72c:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <_ZL11anidamiento+0x1>
     730:	89 2b       	or	r24, r25
     732:	81 f7       	brne	.-32     	; 0x714 <_Z14critical_beginv+0x26>
     734:	08 95       	ret

00000736 <_Z12critical_endv>:
    // crítica, no hacer nada.
}

void critical_end(void)
{
    uint8_t status_register = SREG;
     736:	2f b7       	in	r18, 0x3f	; 63
    cli();
     738:	f8 94       	cli

    if (anidamiento > 0) {
     73a:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <_ZL11anidamiento>
     73e:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <_ZL11anidamiento+0x1>
     742:	18 16       	cp	r1, r24
     744:	19 06       	cpc	r1, r25
     746:	8c f4       	brge	.+34     	; 0x76a <_Z12critical_endv+0x34>
        anidamiento--;
     748:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <_ZL11anidamiento>
     74c:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <_ZL11anidamiento+0x1>
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <_ZL11anidamiento+0x1>
     756:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <_ZL11anidamiento>
        if (anidamiento == 0)
     75a:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <_ZL11anidamiento>
     75e:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <_ZL11anidamiento+0x1>
     762:	89 2b       	or	r24, r25
     764:	29 f4       	brne	.+10     	; 0x770 <_Z12critical_endv+0x3a>
            sei();
     766:	78 94       	sei
     768:	08 95       	ret
    }
    else if ((status_register & 0x80) != 0)
     76a:	22 23       	and	r18, r18
     76c:	0c f4       	brge	.+2      	; 0x770 <_Z12critical_endv+0x3a>
        sei();
     76e:	78 94       	sei
     770:	08 95       	ret

00000772 <_Z11ProcesarAdcv>:
		teclas_callback[tecla].callback_Down = handler;
	}
}

void ProcesarAdc()
{
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
	int16_t k;
	for (k = 0; k < NRO_TECLAS; k++)
	{
		if (analogVal < adc_key_val[k])
     776:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <_ZL9analogVal>
     77a:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <_ZL9analogVal+0x1>
     77e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     782:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     786:	82 17       	cp	r24, r18
     788:	93 07       	cpc	r25, r19
     78a:	74 f0       	brlt	.+28     	; 0x7a8 <_Z11ProcesarAdcv+0x36>
     78c:	e2 e0       	ldi	r30, 0x02	; 2
     78e:	f1 e0       	ldi	r31, 0x01	; 1
}

void ProcesarAdc()
{
	int16_t k;
	for (k = 0; k < NRO_TECLAS; k++)
     790:	c1 e0       	ldi	r28, 0x01	; 1
     792:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (analogVal < adc_key_val[k])
     794:	21 91       	ld	r18, Z+
     796:	31 91       	ld	r19, Z+
     798:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <_ZL9analogVal>
     79c:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <_ZL9analogVal+0x1>
     7a0:	82 17       	cp	r24, r18
     7a2:	93 07       	cpc	r25, r19
     7a4:	6c f5       	brge	.+90     	; 0x800 <_Z11ProcesarAdcv+0x8e>
     7a6:	4a c0       	rjmp	.+148    	; 0x83c <_Z11ProcesarAdcv+0xca>
		{
			if(oldkey!=k)
     7a8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZL6oldkey>
     7ac:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZL6oldkey+0x1>
     7b0:	89 2b       	or	r24, r25
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <_Z11ProcesarAdcv+0x44>
     7b4:	4b c0       	rjmp	.+150    	; 0x84c <_Z11ProcesarAdcv+0xda>
}

void ProcesarAdc()
{
	int16_t k;
	for (k = 0; k < NRO_TECLAS; k++)
     7b6:	c0 e0       	ldi	r28, 0x00	; 0
     7b8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (analogVal < adc_key_val[k])
		{
			if(oldkey!=k)
			{
				oldkey=k;
     7ba:	d0 93 0b 01 	sts	0x010B, r29	; 0x80010b <_ZL6oldkey+0x1>
     7be:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_ZL6oldkey>
				Serial.println(analogVal);
     7c2:	60 91 b2 02 	lds	r22, 0x02B2	; 0x8002b2 <_ZL9analogVal>
     7c6:	70 91 b3 02 	lds	r23, 0x02B3	; 0x8002b3 <_ZL9analogVal+0x1>
     7ca:	4a e0       	ldi	r20, 0x0A	; 10
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	84 ef       	ldi	r24, 0xF4	; 244
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN5Print7printlnEii>
				Serial.println(k);
     7d6:	4a e0       	ldi	r20, 0x0A	; 10
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	be 01       	movw	r22, r28
     7dc:	84 ef       	ldi	r24, 0xF4	; 244
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN5Print7printlnEii>
				teclas_callback[k].callback_Down();
     7e4:	fe 01       	movw	r30, r28
     7e6:	ee 0f       	add	r30, r30
     7e8:	ff 1f       	adc	r31, r31
     7ea:	ee 0f       	add	r30, r30
     7ec:	ff 1f       	adc	r31, r31
     7ee:	e4 56       	subi	r30, 0x64	; 100
     7f0:	fd 4f       	sbci	r31, 0xFD	; 253
     7f2:	02 80       	ldd	r0, Z+2	; 0x02
     7f4:	f3 81       	ldd	r31, Z+3	; 0x03
     7f6:	e0 2d       	mov	r30, r0
     7f8:	09 95       	icall
			}
			break;
		}
	}
	if (k >= NRO_TECLAS)		//solto el boton
     7fa:	25 97       	sbiw	r28, 0x05	; 5
     7fc:	3c f1       	brlt	.+78     	; 0x84c <_Z11ProcesarAdcv+0xda>
     7fe:	04 c0       	rjmp	.+8      	; 0x808 <_Z11ProcesarAdcv+0x96>
}

void ProcesarAdc()
{
	int16_t k;
	for (k = 0; k < NRO_TECLAS; k++)
     800:	21 96       	adiw	r28, 0x01	; 1
     802:	c5 30       	cpi	r28, 0x05	; 5
     804:	d1 05       	cpc	r29, r1
     806:	31 f6       	brne	.-116    	; 0x794 <_Z11ProcesarAdcv+0x22>
			}
			break;
		}
	}
	if (k >= NRO_TECLAS)		//solto el boton
	if(oldkey!= -1)
     808:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZL6oldkey>
     80c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZL6oldkey+0x1>
     810:	8f 3f       	cpi	r24, 0xFF	; 255
     812:	2f ef       	ldi	r18, 0xFF	; 255
     814:	92 07       	cpc	r25, r18
     816:	d1 f0       	breq	.+52     	; 0x84c <_Z11ProcesarAdcv+0xda>
	{
		teclas_callback[oldkey].callback_Up();
     818:	88 0f       	add	r24, r24
     81a:	99 1f       	adc	r25, r25
     81c:	88 0f       	add	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	fc 01       	movw	r30, r24
     822:	e4 56       	subi	r30, 0x64	; 100
     824:	fd 4f       	sbci	r31, 0xFD	; 253
     826:	01 90       	ld	r0, Z+
     828:	f0 81       	ld	r31, Z
     82a:	e0 2d       	mov	r30, r0
     82c:	09 95       	icall
		oldkey = -1;     // Solto el boton y cambio el valor de oldkey
     82e:	8f ef       	ldi	r24, 0xFF	; 255
     830:	9f ef       	ldi	r25, 0xFF	; 255
     832:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZL6oldkey+0x1>
     836:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6oldkey>
	}
	;
}
     83a:	08 c0       	rjmp	.+16     	; 0x84c <_Z11ProcesarAdcv+0xda>
	int16_t k;
	for (k = 0; k < NRO_TECLAS; k++)
	{
		if (analogVal < adc_key_val[k])
		{
			if(oldkey!=k)
     83c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZL6oldkey>
     840:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZL6oldkey+0x1>
     844:	8c 17       	cp	r24, r28
     846:	9d 07       	cpc	r25, r29
     848:	09 f0       	breq	.+2      	; 0x84c <_Z11ProcesarAdcv+0xda>
     84a:	b7 cf       	rjmp	.-146    	; 0x7ba <_Z11ProcesarAdcv+0x48>
	{
		teclas_callback[oldkey].callback_Up();
		oldkey = -1;     // Solto el boton y cambio el valor de oldkey
	}
	;
}
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <_Z15key_up_callbackPFvvEi>:
static int contador=0;
int16_t adc_key_val[NRO_TECLAS] ={50, 150, 360, 535, 760 };
struct callback_str teclas_callback[NRO_TECLAS];

void key_up_callback(void (* handler)(), int tecla){
	if(tecla>=0 && tecla < NRO_TECLAS){
     852:	65 30       	cpi	r22, 0x05	; 5
     854:	71 05       	cpc	r23, r1
     856:	48 f4       	brcc	.+18     	; 0x86a <_Z15key_up_callbackPFvvEi+0x18>
		teclas_callback[tecla].callback_Up = handler;
     858:	66 0f       	add	r22, r22
     85a:	77 1f       	adc	r23, r23
     85c:	66 0f       	add	r22, r22
     85e:	77 1f       	adc	r23, r23
     860:	fb 01       	movw	r30, r22
     862:	e4 56       	subi	r30, 0x64	; 100
     864:	fd 4f       	sbci	r31, 0xFD	; 253
     866:	91 83       	std	Z+1, r25	; 0x01
     868:	80 83       	st	Z, r24
     86a:	08 95       	ret

0000086c <_Z17key_down_callbackPFvvEi>:
	}
}

void key_down_callback(void (* handler)(), int tecla){
	if(tecla>=0 && tecla < NRO_TECLAS){
     86c:	65 30       	cpi	r22, 0x05	; 5
     86e:	71 05       	cpc	r23, r1
     870:	48 f4       	brcc	.+18     	; 0x884 <_Z17key_down_callbackPFvvEi+0x18>
		teclas_callback[tecla].callback_Down = handler;
     872:	66 0f       	add	r22, r22
     874:	77 1f       	adc	r23, r23
     876:	66 0f       	add	r22, r22
     878:	77 1f       	adc	r23, r23
     87a:	fb 01       	movw	r30, r22
     87c:	e4 56       	subi	r30, 0x64	; 100
     87e:	fd 4f       	sbci	r31, 0xFD	; 253
     880:	93 83       	std	Z+3, r25	; 0x03
     882:	82 83       	std	Z+2, r24	; 0x02
     884:	08 95       	ret

00000886 <__vector_21>:
		oldkey = -1;     // Solto el boton y cambio el valor de oldkey
	}
	;
}

ISR(ADC_vect){
     886:	1f 92       	push	r1
     888:	0f 92       	push	r0
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	0f 92       	push	r0
     88e:	11 24       	eor	r1, r1
     890:	2f 93       	push	r18
     892:	3f 93       	push	r19
     894:	4f 93       	push	r20
     896:	5f 93       	push	r21
     898:	6f 93       	push	r22
     89a:	7f 93       	push	r23
     89c:	8f 93       	push	r24
     89e:	9f 93       	push	r25
     8a0:	af 93       	push	r26
     8a2:	bf 93       	push	r27
     8a4:	ef 93       	push	r30
     8a6:	ff 93       	push	r31
	contador++;
     8a8:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <_ZL8contador>
     8ac:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <_ZL8contador+0x1>
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <_ZL8contador+0x1>
     8b6:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <_ZL8contador>
	if(contador>50){
     8ba:	c3 97       	sbiw	r24, 0x33	; 51
     8bc:	84 f0       	brlt	.+32     	; 0x8de <__vector_21+0x58>
		analogVal= ADC;
     8be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     8c2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     8c6:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <_ZL9analogVal+0x1>
     8ca:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <_ZL9analogVal>
		fnqueue_add(ProcesarAdc);
     8ce:	89 eb       	ldi	r24, 0xB9	; 185
     8d0:	93 e0       	ldi	r25, 0x03	; 3
     8d2:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_Z11fnqueue_addPFvvE>
		contador=0;
     8d6:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <_ZL8contador+0x1>
     8da:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <_ZL8contador>
	}
	
}
     8de:	ff 91       	pop	r31
     8e0:	ef 91       	pop	r30
     8e2:	bf 91       	pop	r27
     8e4:	af 91       	pop	r26
     8e6:	9f 91       	pop	r25
     8e8:	8f 91       	pop	r24
     8ea:	7f 91       	pop	r23
     8ec:	6f 91       	pop	r22
     8ee:	5f 91       	pop	r21
     8f0:	4f 91       	pop	r20
     8f2:	3f 91       	pop	r19
     8f4:	2f 91       	pop	r18
     8f6:	0f 90       	pop	r0
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	0f 90       	pop	r0
     8fc:	1f 90       	pop	r1
     8fe:	18 95       	reti

00000900 <_Z13teclado_setupv>:
void teclado_setup()
{
		
		// clear ADLAR in ADMUX (0x7C) to right-adjust the result
		// ADCL will contain lower 8 bits, ADCH upper 2 (in last two bits)
		ADMUX &= ~(1<<ADLAR);
     900:	ec e7       	ldi	r30, 0x7C	; 124
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	8f 7d       	andi	r24, 0xDF	; 223
     908:	80 83       	st	Z, r24
		
		// Set REFS1..0 in ADMUX (0x7C) to change reference voltage to the
		// proper source (01)
		ADMUX |= (1<<REFS0);
     90a:	80 81       	ld	r24, Z
     90c:	80 64       	ori	r24, 0x40	; 64
     90e:	80 83       	st	Z, r24
		
		// Clear MUX3..0 in ADMUX (0x7C) in preparation for setting the analog
		// input
		ADMUX &= ~(1<<MUX3 | 1<<MUX2 | 1<<MUX1 | 1<<MUX0);
     910:	80 81       	ld	r24, Z
     912:	80 7f       	andi	r24, 0xF0	; 240
     914:	80 83       	st	Z, r24
		//	ADMUX |= 8;
		// ADMUX |= B00001000; // Binary equivalent
		
		// Set ADEN in ADCSRA (0x7A) to enable the ADC.
		// Note, this instruction takes 12 ADC clocks to execute
		ADCSRA |= 1<<ADEN;
     916:	ea e7       	ldi	r30, 0x7A	; 122
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	80 68       	ori	r24, 0x80	; 128
     91e:	80 83       	st	Z, r24
		
		// Set ADATE in ADCSRA (0x7A) to enable auto-triggering.
		ADCSRA |= 1<<ADATE;
     920:	80 81       	ld	r24, Z
     922:	80 62       	ori	r24, 0x20	; 32
     924:	80 83       	st	Z, r24
		
		// Clear ADTS2..0 in ADCSRB (0x7B) to set trigger mode to free running.
		// This means that as soon as an ADC has finished, the next will be
		// immediately started.
		ADCSRB &= ~(1<<ADTS2 | 1<<ADTS1 | 1<<ADTS0);
     926:	ab e7       	ldi	r26, 0x7B	; 123
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	8c 91       	ld	r24, X
     92c:	88 7f       	andi	r24, 0xF8	; 248
     92e:	8c 93       	st	X, r24
		
		// Set the Prescaler to 128 (16000KHz/128 = 125KHz)
		// Above 200KHz 10-bit results are not reliable.
		ADCSRA |= (1<<ADPS2 | 1<<ADPS1 | 1<<ADPS2);
     930:	80 81       	ld	r24, Z
     932:	86 60       	ori	r24, 0x06	; 6
     934:	80 83       	st	Z, r24
		
		// Set ADIE in ADCSRA (0x7A) to enable the ADC interrupt.
		// Without this, the internal interrupt will not trigger.
		ADCSRA |= 1<<ADIE;
     936:	80 81       	ld	r24, Z
     938:	88 60       	ori	r24, 0x08	; 8
     93a:	80 83       	st	Z, r24
		
		// Enable global interrupts
		// AVR macro included in <avr/interrupts.h>, which the Arduino IDE
		// supplies by default.
		sei();
     93c:	78 94       	sei
		
		// Kick off the first ADC
		
		// Set ADSC in ADCSRA (0x7A) to start the ADC conversion
		ADCSRA |= 1<<ADSC;
     93e:	80 81       	ld	r24, Z
     940:	80 64       	ori	r24, 0x40	; 64
     942:	80 83       	st	Z, r24
     944:	08 95       	ret

00000946 <_Z12fnqueue_initv>:
	fnqueue_tail,
	fnqueue_count;

bool fnqueue_init(void)
{
	fnqueue_head = 0;
     946:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <_ZL12fnqueue_head>
	fnqueue_tail = 0;
     94a:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <_ZL12fnqueue_tail>
	fnqueue_count = 0;
     94e:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <_ZL13fnqueue_count>
    
    return true;
}
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	08 95       	ret

00000956 <_Z11fnqueue_runv>:

bool fnqueue_run(void)
{
    critical_begin();
     956:	0e 94 77 03 	call	0x6ee	; 0x6ee <_Z14critical_beginv>
    if (fnqueue_count > 0)
     95a:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <_ZL13fnqueue_count>
     95e:	88 23       	and	r24, r24
     960:	11 f1       	breq	.+68     	; 0x9a6 <_Z11fnqueue_runv+0x50>
    {
        critical_end();
     962:	0e 94 9b 03 	call	0x736	; 0x736 <_Z12critical_endv>

        fnqueue_functions[fnqueue_head]();
     966:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <_ZL12fnqueue_head>
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	ee 0f       	add	r30, r30
     96e:	ff 1f       	adc	r31, r31
     970:	e9 54       	subi	r30, 0x49	; 73
     972:	fd 4f       	sbci	r31, 0xFD	; 253
     974:	01 90       	ld	r0, Z+
     976:	f0 81       	ld	r31, Z
     978:	e0 2d       	mov	r30, r0
     97a:	09 95       	icall
        critical_begin();
     97c:	0e 94 77 03 	call	0x6ee	; 0x6ee <_Z14critical_beginv>
        fnqueue_head = (fnqueue_head + 1) % FNQUEUE_LENGTH;
     980:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <_ZL12fnqueue_head>
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	8f 70       	andi	r24, 0x0F	; 15
     98a:	90 78       	andi	r25, 0x80	; 128
     98c:	99 23       	and	r25, r25
     98e:	24 f4       	brge	.+8      	; 0x998 <_Z11fnqueue_runv+0x42>
     990:	01 97       	sbiw	r24, 0x01	; 1
     992:	80 6f       	ori	r24, 0xF0	; 240
     994:	9f 6f       	ori	r25, 0xFF	; 255
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <_ZL12fnqueue_head>
        fnqueue_count--;
     99c:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <_ZL13fnqueue_count>
     9a0:	81 50       	subi	r24, 0x01	; 1
     9a2:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <_ZL13fnqueue_count>
    }
    critical_end();
     9a6:	0e 94 9b 03 	call	0x736	; 0x736 <_Z12critical_endv>

	return 1;
}
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	08 95       	ret

000009ae <_Z11fnqueue_addPFvvE>:

bool fnqueue_add(void (*function)(void))
{
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	ec 01       	movw	r28, r24
	bool result = false;
	
    critical_begin();
     9b4:	0e 94 77 03 	call	0x6ee	; 0x6ee <_Z14critical_beginv>
    if (fnqueue_count < FNQUEUE_LENGTH)
     9b8:	20 91 b4 02 	lds	r18, 0x02B4	; 0x8002b4 <_ZL13fnqueue_count>
     9bc:	20 31       	cpi	r18, 0x10	; 16
     9be:	d0 f4       	brcc	.+52     	; 0x9f4 <_Z11fnqueue_addPFvvE+0x46>
    {
        fnqueue_functions[fnqueue_tail] = function;
     9c0:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <_ZL12fnqueue_tail>
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	fc 01       	movw	r30, r24
     9c8:	ee 0f       	add	r30, r30
     9ca:	ff 1f       	adc	r31, r31
     9cc:	e9 54       	subi	r30, 0x49	; 73
     9ce:	fd 4f       	sbci	r31, 0xFD	; 253
     9d0:	d1 83       	std	Z+1, r29	; 0x01
     9d2:	c0 83       	st	Z, r28
        fnqueue_tail = (fnqueue_tail + 1) % FNQUEUE_LENGTH;
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	8f 70       	andi	r24, 0x0F	; 15
     9d8:	90 78       	andi	r25, 0x80	; 128
     9da:	99 23       	and	r25, r25
     9dc:	24 f4       	brge	.+8      	; 0x9e6 <_Z11fnqueue_addPFvvE+0x38>
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	80 6f       	ori	r24, 0xF0	; 240
     9e2:	9f 6f       	ori	r25, 0xFF	; 255
     9e4:	01 96       	adiw	r24, 0x01	; 1
     9e6:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <_ZL12fnqueue_tail>
        fnqueue_count++;
     9ea:	2f 5f       	subi	r18, 0xFF	; 255
     9ec:	20 93 b4 02 	sts	0x02B4, r18	; 0x8002b4 <_ZL13fnqueue_count>
        result = true;
     9f0:	c1 e0       	ldi	r28, 0x01	; 1
     9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <_Z11fnqueue_addPFvvE+0x48>
	return 1;
}

bool fnqueue_add(void (*function)(void))
{
	bool result = false;
     9f4:	c0 e0       	ldi	r28, 0x00	; 0
        fnqueue_functions[fnqueue_tail] = function;
        fnqueue_tail = (fnqueue_tail + 1) % FNQUEUE_LENGTH;
        fnqueue_count++;
        result = true;
    }
    critical_end();
     9f6:	0e 94 9b 03 	call	0x736	; 0x736 <_Z12critical_endv>
    return result;
}
     9fa:	8c 2f       	mov	r24, r28
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <_ZN5Print17availableForWriteEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	08 95       	ret

00000a08 <_ZN5Print5flushEv>:
     a08:	08 95       	ret

00000a0a <_ZN13LiquidCrystal11pulseEnableEv>:
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	ec 01       	movw	r28, r24
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	8e 81       	ldd	r24, Y+6	; 0x06
     a14:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     a20:	61 e0       	ldi	r22, 0x01	; 1
     a22:	8e 81       	ldd	r24, Y+6	; 0x06
     a24:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	8e 81       	ldd	r24, Y+6	; 0x06
     a34:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     a38:	84 e6       	ldi	r24, 0x64	; 100
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	08 95       	ret

00000a46 <_ZN13LiquidCrystal10write4bitsEh>:
     a46:	cf 92       	push	r12
     a48:	df 92       	push	r13
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	6c 01       	movw	r12, r24
     a58:	8c 01       	movw	r16, r24
     a5a:	09 5f       	subi	r16, 0xF9	; 249
     a5c:	1f 4f       	sbci	r17, 0xFF	; 255
     a5e:	c0 e0       	ldi	r28, 0x00	; 0
     a60:	d0 e0       	ldi	r29, 0x00	; 0
     a62:	e6 2e       	mov	r14, r22
     a64:	f1 2c       	mov	r15, r1
     a66:	b7 01       	movw	r22, r14
     a68:	0c 2e       	mov	r0, r28
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <_ZN13LiquidCrystal10write4bitsEh+0x2a>
     a6c:	75 95       	asr	r23
     a6e:	67 95       	ror	r22
     a70:	0a 94       	dec	r0
     a72:	e2 f7       	brpl	.-8      	; 0xa6c <_ZN13LiquidCrystal10write4bitsEh+0x26>
     a74:	61 70       	andi	r22, 0x01	; 1
     a76:	f8 01       	movw	r30, r16
     a78:	81 91       	ld	r24, Z+
     a7a:	8f 01       	movw	r16, r30
     a7c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     a80:	21 96       	adiw	r28, 0x01	; 1
     a82:	c4 30       	cpi	r28, 0x04	; 4
     a84:	d1 05       	cpc	r29, r1
     a86:	79 f7       	brne	.-34     	; 0xa66 <_ZN13LiquidCrystal10write4bitsEh+0x20>
     a88:	c6 01       	movw	r24, r12
     a8a:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN13LiquidCrystal11pulseEnableEv>
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	cf 90       	pop	r12
     a9e:	08 95       	ret

00000aa0 <_ZN13LiquidCrystal10write8bitsEh>:
     aa0:	cf 92       	push	r12
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	6c 01       	movw	r12, r24
     ab2:	8c 01       	movw	r16, r24
     ab4:	09 5f       	subi	r16, 0xF9	; 249
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	c0 e0       	ldi	r28, 0x00	; 0
     aba:	d0 e0       	ldi	r29, 0x00	; 0
     abc:	e6 2e       	mov	r14, r22
     abe:	f1 2c       	mov	r15, r1
     ac0:	b7 01       	movw	r22, r14
     ac2:	0c 2e       	mov	r0, r28
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <_ZN13LiquidCrystal10write8bitsEh+0x2a>
     ac6:	75 95       	asr	r23
     ac8:	67 95       	ror	r22
     aca:	0a 94       	dec	r0
     acc:	e2 f7       	brpl	.-8      	; 0xac6 <_ZN13LiquidCrystal10write8bitsEh+0x26>
     ace:	61 70       	andi	r22, 0x01	; 1
     ad0:	f8 01       	movw	r30, r16
     ad2:	81 91       	ld	r24, Z+
     ad4:	8f 01       	movw	r16, r30
     ad6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     ada:	21 96       	adiw	r28, 0x01	; 1
     adc:	c8 30       	cpi	r28, 0x08	; 8
     ade:	d1 05       	cpc	r29, r1
     ae0:	79 f7       	brne	.-34     	; 0xac0 <_ZN13LiquidCrystal10write8bitsEh+0x20>
     ae2:	c6 01       	movw	r24, r12
     ae4:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN13LiquidCrystal11pulseEnableEv>
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	ff 90       	pop	r15
     af2:	ef 90       	pop	r14
     af4:	df 90       	pop	r13
     af6:	cf 90       	pop	r12
     af8:	08 95       	ret

00000afa <_ZN13LiquidCrystal4sendEhh>:
     afa:	1f 93       	push	r17
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	ec 01       	movw	r28, r24
     b02:	16 2f       	mov	r17, r22
     b04:	64 2f       	mov	r22, r20
     b06:	8c 81       	ldd	r24, Y+4	; 0x04
     b08:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     b0c:	8d 81       	ldd	r24, Y+5	; 0x05
     b0e:	8f 3f       	cpi	r24, 0xFF	; 255
     b10:	19 f0       	breq	.+6      	; 0xb18 <_ZN13LiquidCrystal4sendEhh+0x1e>
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     b18:	8f 85       	ldd	r24, Y+15	; 0x0f
     b1a:	84 ff       	sbrs	r24, 4
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <_ZN13LiquidCrystal4sendEhh+0x2e>
     b1e:	61 2f       	mov	r22, r17
     b20:	ce 01       	movw	r24, r28
     b22:	0e 94 50 05 	call	0xaa0	; 0xaa0 <_ZN13LiquidCrystal10write8bitsEh>
     b26:	11 c0       	rjmp	.+34     	; 0xb4a <_ZN13LiquidCrystal4sendEhh+0x50>
     b28:	61 2f       	mov	r22, r17
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	75 95       	asr	r23
     b2e:	67 95       	ror	r22
     b30:	75 95       	asr	r23
     b32:	67 95       	ror	r22
     b34:	75 95       	asr	r23
     b36:	67 95       	ror	r22
     b38:	75 95       	asr	r23
     b3a:	67 95       	ror	r22
     b3c:	ce 01       	movw	r24, r28
     b3e:	0e 94 23 05 	call	0xa46	; 0xa46 <_ZN13LiquidCrystal10write4bitsEh>
     b42:	61 2f       	mov	r22, r17
     b44:	ce 01       	movw	r24, r28
     b46:	0e 94 23 05 	call	0xa46	; 0xa46 <_ZN13LiquidCrystal10write4bitsEh>
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	08 95       	ret

00000b52 <_ZN13LiquidCrystal5clearEv>:
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	61 e0       	ldi	r22, 0x01	; 1
     b56:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN13LiquidCrystal4sendEhh>
     b5a:	80 ed       	ldi	r24, 0xD0	; 208
     b5c:	97 e0       	ldi	r25, 0x07	; 7
     b5e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     b62:	08 95       	ret

00000b64 <_ZN13LiquidCrystal9setCursorEhh>:
     b64:	fc 01       	movw	r30, r24
     b66:	44 30       	cpi	r20, 0x04	; 4
     b68:	08 f0       	brcs	.+2      	; 0xb6c <_ZN13LiquidCrystal9setCursorEhh+0x8>
     b6a:	43 e0       	ldi	r20, 0x03	; 3
     b6c:	83 89       	ldd	r24, Z+19	; 0x13
     b6e:	48 17       	cp	r20, r24
     b70:	10 f0       	brcs	.+4      	; 0xb76 <_ZN13LiquidCrystal9setCursorEhh+0x12>
     b72:	4f ef       	ldi	r20, 0xFF	; 255
     b74:	48 0f       	add	r20, r24
     b76:	df 01       	movw	r26, r30
     b78:	a4 0f       	add	r26, r20
     b7a:	b1 1d       	adc	r27, r1
     b7c:	54 96       	adiw	r26, 0x14	; 20
     b7e:	9c 91       	ld	r25, X
     b80:	69 0f       	add	r22, r25
     b82:	60 68       	ori	r22, 0x80	; 128
     b84:	40 e0       	ldi	r20, 0x00	; 0
     b86:	cf 01       	movw	r24, r30
     b88:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN13LiquidCrystal4sendEhh>
     b8c:	08 95       	ret

00000b8e <_ZN13LiquidCrystal7displayEv>:
     b8e:	fc 01       	movw	r30, r24
     b90:	60 89       	ldd	r22, Z+16	; 0x10
     b92:	26 2f       	mov	r18, r22
     b94:	24 60       	ori	r18, 0x04	; 4
     b96:	20 8b       	std	Z+16, r18	; 0x10
     b98:	6c 60       	ori	r22, 0x0C	; 12
     b9a:	40 e0       	ldi	r20, 0x00	; 0
     b9c:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN13LiquidCrystal4sendEhh>
     ba0:	08 95       	ret

00000ba2 <_ZN13LiquidCrystal5beginEhhh>:
     ba2:	af 92       	push	r10
     ba4:	bf 92       	push	r11
     ba6:	cf 92       	push	r12
     ba8:	df 92       	push	r13
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	ec 01       	movw	r28, r24
     bb8:	42 30       	cpi	r20, 0x02	; 2
     bba:	18 f0       	brcs	.+6      	; 0xbc2 <_ZN13LiquidCrystal5beginEhhh+0x20>
     bbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     bbe:	88 60       	ori	r24, 0x08	; 8
     bc0:	8f 87       	std	Y+15, r24	; 0x0f
     bc2:	4b 8b       	std	Y+19, r20	; 0x13
     bc4:	1c 8a       	std	Y+20, r1	; 0x14
     bc6:	80 e4       	ldi	r24, 0x40	; 64
     bc8:	8d 8b       	std	Y+21, r24	; 0x15
     bca:	6e 8b       	std	Y+22, r22	; 0x16
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	60 5c       	subi	r22, 0xC0	; 192
     bd0:	7f 4f       	sbci	r23, 0xFF	; 255
     bd2:	6f 8b       	std	Y+23, r22	; 0x17
     bd4:	22 23       	and	r18, r18
     bd6:	29 f0       	breq	.+10     	; 0xbe2 <_ZN13LiquidCrystal5beginEhhh+0x40>
     bd8:	41 30       	cpi	r20, 0x01	; 1
     bda:	19 f4       	brne	.+6      	; 0xbe2 <_ZN13LiquidCrystal5beginEhhh+0x40>
     bdc:	8f 85       	ldd	r24, Y+15	; 0x0f
     bde:	84 60       	ori	r24, 0x04	; 4
     be0:	8f 87       	std	Y+15, r24	; 0x0f
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	8c 81       	ldd	r24, Y+4	; 0x04
     be6:	0e 94 41 02 	call	0x482	; 0x482 <pinMode>
     bea:	8d 81       	ldd	r24, Y+5	; 0x05
     bec:	8f 3f       	cpi	r24, 0xFF	; 255
     bee:	19 f0       	breq	.+6      	; 0xbf6 <_ZN13LiquidCrystal5beginEhhh+0x54>
     bf0:	61 e0       	ldi	r22, 0x01	; 1
     bf2:	0e 94 41 02 	call	0x482	; 0x482 <pinMode>
     bf6:	61 e0       	ldi	r22, 0x01	; 1
     bf8:	8e 81       	ldd	r24, Y+6	; 0x06
     bfa:	0e 94 41 02 	call	0x482	; 0x482 <pinMode>
     bfe:	7e 01       	movw	r14, r28
     c00:	87 e0       	ldi	r24, 0x07	; 7
     c02:	e8 0e       	add	r14, r24
     c04:	f1 1c       	adc	r15, r1
     c06:	00 e0       	ldi	r16, 0x00	; 0
     c08:	10 e0       	ldi	r17, 0x00	; 0
     c0a:	68 94       	set
     c0c:	aa 24       	eor	r10, r10
     c0e:	a3 f8       	bld	r10, 3
     c10:	b1 2c       	mov	r11, r1
     c12:	68 94       	set
     c14:	cc 24       	eor	r12, r12
     c16:	c2 f8       	bld	r12, 2
     c18:	d1 2c       	mov	r13, r1
     c1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c1c:	84 fd       	sbrc	r24, 4
     c1e:	03 c0       	rjmp	.+6      	; 0xc26 <_ZN13LiquidCrystal5beginEhhh+0x84>
     c20:	8c 2d       	mov	r24, r12
     c22:	9d 2d       	mov	r25, r13
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <_ZN13LiquidCrystal5beginEhhh+0x88>
     c26:	8a 2d       	mov	r24, r10
     c28:	9b 2d       	mov	r25, r11
     c2a:	08 17       	cp	r16, r24
     c2c:	19 07       	cpc	r17, r25
     c2e:	4c f4       	brge	.+18     	; 0xc42 <_ZN13LiquidCrystal5beginEhhh+0xa0>
     c30:	61 e0       	ldi	r22, 0x01	; 1
     c32:	f7 01       	movw	r30, r14
     c34:	81 91       	ld	r24, Z+
     c36:	7f 01       	movw	r14, r30
     c38:	0e 94 41 02 	call	0x482	; 0x482 <pinMode>
     c3c:	0f 5f       	subi	r16, 0xFF	; 255
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
     c40:	ec cf       	rjmp	.-40     	; 0xc1a <_ZN13LiquidCrystal5beginEhhh+0x78>
     c42:	80 e5       	ldi	r24, 0x50	; 80
     c44:	93 ec       	ldi	r25, 0xC3	; 195
     c46:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	8c 81       	ldd	r24, Y+4	; 0x04
     c4e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	8e 81       	ldd	r24, Y+6	; 0x06
     c56:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     c5a:	8d 81       	ldd	r24, Y+5	; 0x05
     c5c:	8f 3f       	cpi	r24, 0xFF	; 255
     c5e:	19 f0       	breq	.+6      	; 0xc66 <_ZN13LiquidCrystal5beginEhhh+0xc4>
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     c66:	6f 85       	ldd	r22, Y+15	; 0x0f
     c68:	64 fd       	sbrc	r22, 4
     c6a:	1d c0       	rjmp	.+58     	; 0xca6 <_ZN13LiquidCrystal5beginEhhh+0x104>
     c6c:	63 e0       	ldi	r22, 0x03	; 3
     c6e:	ce 01       	movw	r24, r28
     c70:	0e 94 23 05 	call	0xa46	; 0xa46 <_ZN13LiquidCrystal10write4bitsEh>
     c74:	84 e9       	ldi	r24, 0x94	; 148
     c76:	91 e1       	ldi	r25, 0x11	; 17
     c78:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     c7c:	63 e0       	ldi	r22, 0x03	; 3
     c7e:	ce 01       	movw	r24, r28
     c80:	0e 94 23 05 	call	0xa46	; 0xa46 <_ZN13LiquidCrystal10write4bitsEh>
     c84:	84 e9       	ldi	r24, 0x94	; 148
     c86:	91 e1       	ldi	r25, 0x11	; 17
     c88:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     c8c:	63 e0       	ldi	r22, 0x03	; 3
     c8e:	ce 01       	movw	r24, r28
     c90:	0e 94 23 05 	call	0xa46	; 0xa46 <_ZN13LiquidCrystal10write4bitsEh>
     c94:	86 e9       	ldi	r24, 0x96	; 150
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     c9c:	62 e0       	ldi	r22, 0x02	; 2
     c9e:	ce 01       	movw	r24, r28
     ca0:	0e 94 23 05 	call	0xa46	; 0xa46 <_ZN13LiquidCrystal10write4bitsEh>
     ca4:	19 c0       	rjmp	.+50     	; 0xcd8 <_ZN13LiquidCrystal5beginEhhh+0x136>
     ca6:	60 62       	ori	r22, 0x20	; 32
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	ce 01       	movw	r24, r28
     cac:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN13LiquidCrystal4sendEhh>
     cb0:	84 e9       	ldi	r24, 0x94	; 148
     cb2:	91 e1       	ldi	r25, 0x11	; 17
     cb4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     cb8:	6f 85       	ldd	r22, Y+15	; 0x0f
     cba:	60 62       	ori	r22, 0x20	; 32
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	ce 01       	movw	r24, r28
     cc0:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN13LiquidCrystal4sendEhh>
     cc4:	86 e9       	ldi	r24, 0x96	; 150
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     ccc:	6f 85       	ldd	r22, Y+15	; 0x0f
     cce:	60 62       	ori	r22, 0x20	; 32
     cd0:	40 e0       	ldi	r20, 0x00	; 0
     cd2:	ce 01       	movw	r24, r28
     cd4:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN13LiquidCrystal4sendEhh>
     cd8:	6f 85       	ldd	r22, Y+15	; 0x0f
     cda:	60 62       	ori	r22, 0x20	; 32
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	ce 01       	movw	r24, r28
     ce0:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN13LiquidCrystal4sendEhh>
     ce4:	84 e0       	ldi	r24, 0x04	; 4
     ce6:	88 8b       	std	Y+16, r24	; 0x10
     ce8:	ce 01       	movw	r24, r28
     cea:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_ZN13LiquidCrystal7displayEv>
     cee:	ce 01       	movw	r24, r28
     cf0:	0e 94 a9 05 	call	0xb52	; 0xb52 <_ZN13LiquidCrystal5clearEv>
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	89 8b       	std	Y+17, r24	; 0x11
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	66 e0       	ldi	r22, 0x06	; 6
     cfc:	ce 01       	movw	r24, r28
     cfe:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN13LiquidCrystal4sendEhh>
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	ff 90       	pop	r15
     d0c:	ef 90       	pop	r14
     d0e:	df 90       	pop	r13
     d10:	cf 90       	pop	r12
     d12:	bf 90       	pop	r11
     d14:	af 90       	pop	r10
     d16:	08 95       	ret

00000d18 <_ZN13LiquidCrystalC1Ehhhhhh>:
     d18:	cf 92       	push	r12
     d1a:	ef 92       	push	r14
     d1c:	0f 93       	push	r16
     d1e:	fc 01       	movw	r30, r24
     d20:	13 82       	std	Z+3, r1	; 0x03
     d22:	12 82       	std	Z+2, r1	; 0x02
     d24:	82 e2       	ldi	r24, 0x22	; 34
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	91 83       	std	Z+1, r25	; 0x01
     d2a:	80 83       	st	Z, r24
     d2c:	64 83       	std	Z+4, r22	; 0x04
     d2e:	8f ef       	ldi	r24, 0xFF	; 255
     d30:	85 83       	std	Z+5, r24	; 0x05
     d32:	46 83       	std	Z+6, r20	; 0x06
     d34:	27 83       	std	Z+7, r18	; 0x07
     d36:	00 87       	std	Z+8, r16	; 0x08
     d38:	e1 86       	std	Z+9, r14	; 0x09
     d3a:	c2 86       	std	Z+10, r12	; 0x0a
     d3c:	13 86       	std	Z+11, r1	; 0x0b
     d3e:	14 86       	std	Z+12, r1	; 0x0c
     d40:	15 86       	std	Z+13, r1	; 0x0d
     d42:	16 86       	std	Z+14, r1	; 0x0e
     d44:	17 86       	std	Z+15, r1	; 0x0f
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	41 e0       	ldi	r20, 0x01	; 1
     d4a:	60 e1       	ldi	r22, 0x10	; 16
     d4c:	cf 01       	movw	r24, r30
     d4e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN13LiquidCrystal5beginEhhh>
     d52:	0f 91       	pop	r16
     d54:	ef 90       	pop	r14
     d56:	cf 90       	pop	r12
     d58:	08 95       	ret

00000d5a <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     d5a:	41 e0       	ldi	r20, 0x01	; 1
     d5c:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	08 95       	ret

00000d66 <_Z8up_keyUpv>:

// initialize the library with the numbers of the interface pins
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

void up_keyUp(){
	lcd.setCursor(0,1);
     d66:	41 e0       	ldi	r20, 0x01	; 1
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	87 ed       	ldi	r24, 0xD7	; 215
     d6c:	92 e0       	ldi	r25, 0x02	; 2
     d6e:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("UP KeyUP        ");
     d72:	6a e2       	ldi	r22, 0x2A	; 42
     d74:	71 e0       	ldi	r23, 0x01	; 1
     d76:	87 ed       	ldi	r24, 0xD7	; 215
     d78:	92 e0       	ldi	r25, 0x02	; 2
     d7a:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN5Print5printEPKc>
     d7e:	08 95       	ret

00000d80 <_Z10down_keyUpv>:
}
void down_keyUp(){
	lcd.setCursor(0,1);
     d80:	41 e0       	ldi	r20, 0x01	; 1
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	87 ed       	ldi	r24, 0xD7	; 215
     d86:	92 e0       	ldi	r25, 0x02	; 2
     d88:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("DOWN KeyUP      ");
     d8c:	6b e3       	ldi	r22, 0x3B	; 59
     d8e:	71 e0       	ldi	r23, 0x01	; 1
     d90:	87 ed       	ldi	r24, 0xD7	; 215
     d92:	92 e0       	ldi	r25, 0x02	; 2
     d94:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN5Print5printEPKc>
     d98:	08 95       	ret

00000d9a <_Z10up_keyDownv>:
}
void up_keyDown(){
	lcd.setCursor(0,1);
     d9a:	41 e0       	ldi	r20, 0x01	; 1
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	87 ed       	ldi	r24, 0xD7	; 215
     da0:	92 e0       	ldi	r25, 0x02	; 2
     da2:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("UP KeyDown      ");
     da6:	6c e4       	ldi	r22, 0x4C	; 76
     da8:	71 e0       	ldi	r23, 0x01	; 1
     daa:	87 ed       	ldi	r24, 0xD7	; 215
     dac:	92 e0       	ldi	r25, 0x02	; 2
     dae:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN5Print5printEPKc>
     db2:	08 95       	ret

00000db4 <_Z12down_keyDownv>:
}
void down_keyDown(){
	lcd.setCursor(0,1);
     db4:	41 e0       	ldi	r20, 0x01	; 1
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	87 ed       	ldi	r24, 0xD7	; 215
     dba:	92 e0       	ldi	r25, 0x02	; 2
     dbc:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("DOWN KeyDown    ");
     dc0:	6d e5       	ldi	r22, 0x5D	; 93
     dc2:	71 e0       	ldi	r23, 0x01	; 1
     dc4:	87 ed       	ldi	r24, 0xD7	; 215
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN5Print5printEPKc>
     dcc:	08 95       	ret

00000dce <_Z11up_keyRightv>:
}
void up_keyRight(){
	lcd.setCursor(0,1);
     dce:	41 e0       	ldi	r20, 0x01	; 1
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	87 ed       	ldi	r24, 0xD7	; 215
     dd4:	92 e0       	ldi	r25, 0x02	; 2
     dd6:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("UP KeyRight     ");
     dda:	6e e6       	ldi	r22, 0x6E	; 110
     ddc:	71 e0       	ldi	r23, 0x01	; 1
     dde:	87 ed       	ldi	r24, 0xD7	; 215
     de0:	92 e0       	ldi	r25, 0x02	; 2
     de2:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN5Print5printEPKc>
     de6:	08 95       	ret

00000de8 <_Z13down_keyRightv>:
}
void down_keyRight(){
	lcd.setCursor(0,1);
     de8:	41 e0       	ldi	r20, 0x01	; 1
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	87 ed       	ldi	r24, 0xD7	; 215
     dee:	92 e0       	ldi	r25, 0x02	; 2
     df0:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("DOWN KeyRight   ");
     df4:	6f e7       	ldi	r22, 0x7F	; 127
     df6:	71 e0       	ldi	r23, 0x01	; 1
     df8:	87 ed       	ldi	r24, 0xD7	; 215
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN5Print5printEPKc>
     e00:	08 95       	ret

00000e02 <_Z10up_keyLeftv>:
}
void up_keyLeft(){
	lcd.setCursor(0,1);
     e02:	41 e0       	ldi	r20, 0x01	; 1
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	87 ed       	ldi	r24, 0xD7	; 215
     e08:	92 e0       	ldi	r25, 0x02	; 2
     e0a:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("UP KeyLeft      ");
     e0e:	60 e9       	ldi	r22, 0x90	; 144
     e10:	71 e0       	ldi	r23, 0x01	; 1
     e12:	87 ed       	ldi	r24, 0xD7	; 215
     e14:	92 e0       	ldi	r25, 0x02	; 2
     e16:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN5Print5printEPKc>
     e1a:	08 95       	ret

00000e1c <_Z12down_keyLeftv>:
}
void down_keyLeft(){
	lcd.setCursor(0,1);
     e1c:	41 e0       	ldi	r20, 0x01	; 1
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	87 ed       	ldi	r24, 0xD7	; 215
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("DOWN KeyLeft    ");
     e28:	61 ea       	ldi	r22, 0xA1	; 161
     e2a:	71 e0       	ldi	r23, 0x01	; 1
     e2c:	87 ed       	ldi	r24, 0xD7	; 215
     e2e:	92 e0       	ldi	r25, 0x02	; 2
     e30:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN5Print5printEPKc>
     e34:	08 95       	ret

00000e36 <_Z12up_keySelectv>:
}
void up_keySelect(){
	lcd.setCursor(0,1);
     e36:	41 e0       	ldi	r20, 0x01	; 1
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	87 ed       	ldi	r24, 0xD7	; 215
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("UP KeySelect    ");
     e42:	62 eb       	ldi	r22, 0xB2	; 178
     e44:	71 e0       	ldi	r23, 0x01	; 1
     e46:	87 ed       	ldi	r24, 0xD7	; 215
     e48:	92 e0       	ldi	r25, 0x02	; 2
     e4a:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN5Print5printEPKc>
     e4e:	08 95       	ret

00000e50 <_Z14down_keySelectv>:
}
void down_keySelect(){
	lcd.setCursor(0,1);
     e50:	41 e0       	ldi	r20, 0x01	; 1
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	87 ed       	ldi	r24, 0xD7	; 215
     e56:	92 e0       	ldi	r25, 0x02	; 2
     e58:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("DOWN KeySelect  ");
     e5c:	63 ec       	ldi	r22, 0xC3	; 195
     e5e:	71 e0       	ldi	r23, 0x01	; 1
     e60:	87 ed       	ldi	r24, 0xD7	; 215
     e62:	92 e0       	ldi	r25, 0x02	; 2
     e64:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN5Print5printEPKc>
     e68:	08 95       	ret

00000e6a <setup>:
const uint8_t numRows = 2;
const uint8_t numCols = 16;

void setup()
{
	lcd.begin(numCols,numRows);
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	42 e0       	ldi	r20, 0x02	; 2
     e6e:	60 e1       	ldi	r22, 0x10	; 16
     e70:	87 ed       	ldi	r24, 0xD7	; 215
     e72:	92 e0       	ldi	r25, 0x02	; 2
     e74:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN13LiquidCrystal5beginEhhh>
	teclado_setup();
     e78:	0e 94 80 04 	call	0x900	; 0x900 <_Z13teclado_setupv>
	
	fnqueue_init();
     e7c:	0e 94 a3 04 	call	0x946	; 0x946 <_Z12fnqueue_initv>
	
	key_up_callback(up_keyUp, TECLA1);
     e80:	61 e0       	ldi	r22, 0x01	; 1
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	83 eb       	ldi	r24, 0xB3	; 179
     e86:	96 e0       	ldi	r25, 0x06	; 6
     e88:	0e 94 29 04 	call	0x852	; 0x852 <_Z15key_up_callbackPFvvEi>
	key_down_callback(down_keyUp, TECLA1);
     e8c:	61 e0       	ldi	r22, 0x01	; 1
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	80 ec       	ldi	r24, 0xC0	; 192
     e92:	96 e0       	ldi	r25, 0x06	; 6
     e94:	0e 94 36 04 	call	0x86c	; 0x86c <_Z17key_down_callbackPFvvEi>
	key_up_callback(up_keyDown, TECLA2);
     e98:	62 e0       	ldi	r22, 0x02	; 2
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	8d ec       	ldi	r24, 0xCD	; 205
     e9e:	96 e0       	ldi	r25, 0x06	; 6
     ea0:	0e 94 29 04 	call	0x852	; 0x852 <_Z15key_up_callbackPFvvEi>
	key_down_callback(down_keyDown, TECLA2);
     ea4:	62 e0       	ldi	r22, 0x02	; 2
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	8a ed       	ldi	r24, 0xDA	; 218
     eaa:	96 e0       	ldi	r25, 0x06	; 6
     eac:	0e 94 36 04 	call	0x86c	; 0x86c <_Z17key_down_callbackPFvvEi>
	key_up_callback(up_keyLeft, TECLA3);
     eb0:	63 e0       	ldi	r22, 0x03	; 3
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	97 e0       	ldi	r25, 0x07	; 7
     eb8:	0e 94 29 04 	call	0x852	; 0x852 <_Z15key_up_callbackPFvvEi>
	key_down_callback(down_keyLeft, TECLA3);
     ebc:	63 e0       	ldi	r22, 0x03	; 3
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	8e e0       	ldi	r24, 0x0E	; 14
     ec2:	97 e0       	ldi	r25, 0x07	; 7
     ec4:	0e 94 36 04 	call	0x86c	; 0x86c <_Z17key_down_callbackPFvvEi>
	key_up_callback(up_keyRight, TECLA4);
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	87 ee       	ldi	r24, 0xE7	; 231
     ece:	96 e0       	ldi	r25, 0x06	; 6
     ed0:	0e 94 29 04 	call	0x852	; 0x852 <_Z15key_up_callbackPFvvEi>
	key_down_callback(down_keyRight, TECLA4);
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	84 ef       	ldi	r24, 0xF4	; 244
     eda:	96 e0       	ldi	r25, 0x06	; 6
     edc:	0e 94 36 04 	call	0x86c	; 0x86c <_Z17key_down_callbackPFvvEi>
	key_up_callback(up_keySelect, TECLA5);
     ee0:	64 e0       	ldi	r22, 0x04	; 4
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	8b e1       	ldi	r24, 0x1B	; 27
     ee6:	97 e0       	ldi	r25, 0x07	; 7
     ee8:	0e 94 29 04 	call	0x852	; 0x852 <_Z15key_up_callbackPFvvEi>
	key_down_callback(down_keySelect, TECLA5);
     eec:	64 e0       	ldi	r22, 0x04	; 4
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	88 e2       	ldi	r24, 0x28	; 40
     ef2:	97 e0       	ldi	r25, 0x07	; 7
     ef4:	0e 94 36 04 	call	0x86c	; 0x86c <_Z17key_down_callbackPFvvEi>
	
	lcd.setCursor(0, 0);
     ef8:	40 e0       	ldi	r20, 0x00	; 0
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	87 ed       	ldi	r24, 0xD7	; 215
     efe:	92 e0       	ldi	r25, 0x02	; 2
     f00:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Key Pad Test");
     f04:	64 ed       	ldi	r22, 0xD4	; 212
     f06:	71 e0       	ldi	r23, 0x01	; 1
     f08:	87 ed       	ldi	r24, 0xD7	; 215
     f0a:	92 e0       	ldi	r25, 0x02	; 2
     f0c:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN5Print5printEPKc>
	lcd.setCursor(0, 1);
     f10:	41 e0       	ldi	r20, 0x01	; 1
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	87 ed       	ldi	r24, 0xD7	; 215
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Sist.Emb. 2019");
     f1c:	61 ee       	ldi	r22, 0xE1	; 225
     f1e:	71 e0       	ldi	r23, 0x01	; 1
     f20:	87 ed       	ldi	r24, 0xD7	; 215
     f22:	92 e0       	ldi	r25, 0x02	; 2
     f24:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN5Print5printEPKc>
     f28:	08 95       	ret

00000f2a <loop>:
}

void loop()
{
	fnqueue_run();
     f2a:	0e 94 ab 04 	call	0x956	; 0x956 <_Z11fnqueue_runv>
     f2e:	08 95       	ret

00000f30 <_GLOBAL__sub_I_lcd>:
}
     f30:	cf 92       	push	r12
     f32:	ef 92       	push	r14
     f34:	0f 93       	push	r16
#include <LiquidCrystal.h>
#include "fnqueue.h"
#include "device.h"

// initialize the library with the numbers of the interface pins
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);
     f36:	0f 2e       	mov	r0, r31
     f38:	f7 e0       	ldi	r31, 0x07	; 7
     f3a:	cf 2e       	mov	r12, r31
     f3c:	f0 2d       	mov	r31, r0
     f3e:	0f 2e       	mov	r0, r31
     f40:	f6 e0       	ldi	r31, 0x06	; 6
     f42:	ef 2e       	mov	r14, r31
     f44:	f0 2d       	mov	r31, r0
     f46:	05 e0       	ldi	r16, 0x05	; 5
     f48:	24 e0       	ldi	r18, 0x04	; 4
     f4a:	49 e0       	ldi	r20, 0x09	; 9
     f4c:	68 e0       	ldi	r22, 0x08	; 8
     f4e:	87 ed       	ldi	r24, 0xD7	; 215
     f50:	92 e0       	ldi	r25, 0x02	; 2
     f52:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN13LiquidCrystalC1Ehhhhhh>
}

void loop()
{
	fnqueue_run();
}
     f56:	0f 91       	pop	r16
     f58:	ef 90       	pop	r14
     f5a:	cf 90       	pop	r12
     f5c:	08 95       	ret

00000f5e <main>:
     f5e:	78 94       	sei
     f60:	84 b5       	in	r24, 0x24	; 36
     f62:	82 60       	ori	r24, 0x02	; 2
     f64:	84 bd       	out	0x24, r24	; 36
     f66:	84 b5       	in	r24, 0x24	; 36
     f68:	81 60       	ori	r24, 0x01	; 1
     f6a:	84 bd       	out	0x24, r24	; 36
     f6c:	85 b5       	in	r24, 0x25	; 37
     f6e:	82 60       	ori	r24, 0x02	; 2
     f70:	85 bd       	out	0x25, r24	; 37
     f72:	85 b5       	in	r24, 0x25	; 37
     f74:	81 60       	ori	r24, 0x01	; 1
     f76:	85 bd       	out	0x25, r24	; 37
     f78:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     f7c:	81 60       	ori	r24, 0x01	; 1
     f7e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     f82:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     f86:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     f8a:	82 60       	ori	r24, 0x02	; 2
     f8c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     f90:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     f94:	81 60       	ori	r24, 0x01	; 1
     f96:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     f9a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f9e:	81 60       	ori	r24, 0x01	; 1
     fa0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     fa4:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     fa8:	84 60       	ori	r24, 0x04	; 4
     faa:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     fae:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     fb2:	81 60       	ori	r24, 0x01	; 1
     fb4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     fb8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     fbc:	84 60       	ori	r24, 0x04	; 4
     fbe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     fc2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     fc6:	82 60       	ori	r24, 0x02	; 2
     fc8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     fcc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     fd0:	81 60       	ori	r24, 0x01	; 1
     fd2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     fd6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     fda:	80 68       	ori	r24, 0x80	; 128
     fdc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     fe0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     fe4:	0e 94 35 07 	call	0xe6a	; 0xe6a <setup>
     fe8:	0e 94 95 07 	call	0xf2a	; 0xf2a <loop>
     fec:	0e 94 60 01 	call	0x2c0	; 0x2c0 <_Z14serialEventRunv>
     ff0:	fb cf       	rjmp	.-10     	; 0xfe8 <main+0x8a>

00000ff2 <_GLOBAL__sub_I___vector_18>:
     ff2:	e4 ef       	ldi	r30, 0xF4	; 244
     ff4:	f1 e0       	ldi	r31, 0x01	; 1
     ff6:	13 82       	std	Z+3, r1	; 0x03
     ff8:	12 82       	std	Z+2, r1	; 0x02
     ffa:	88 ee       	ldi	r24, 0xE8	; 232
     ffc:	93 e0       	ldi	r25, 0x03	; 3
     ffe:	a0 e0       	ldi	r26, 0x00	; 0
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	84 83       	std	Z+4, r24	; 0x04
    1004:	95 83       	std	Z+5, r25	; 0x05
    1006:	a6 83       	std	Z+6, r26	; 0x06
    1008:	b7 83       	std	Z+7, r27	; 0x07
    100a:	80 e1       	ldi	r24, 0x10	; 16
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	91 83       	std	Z+1, r25	; 0x01
    1010:	80 83       	st	Z, r24
    1012:	85 ec       	ldi	r24, 0xC5	; 197
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	95 87       	std	Z+13, r25	; 0x0d
    1018:	84 87       	std	Z+12, r24	; 0x0c
    101a:	84 ec       	ldi	r24, 0xC4	; 196
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	97 87       	std	Z+15, r25	; 0x0f
    1020:	86 87       	std	Z+14, r24	; 0x0e
    1022:	80 ec       	ldi	r24, 0xC0	; 192
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	91 8b       	std	Z+17, r25	; 0x11
    1028:	80 8b       	std	Z+16, r24	; 0x10
    102a:	81 ec       	ldi	r24, 0xC1	; 193
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	93 8b       	std	Z+19, r25	; 0x13
    1030:	82 8b       	std	Z+18, r24	; 0x12
    1032:	82 ec       	ldi	r24, 0xC2	; 194
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	95 8b       	std	Z+21, r25	; 0x15
    1038:	84 8b       	std	Z+20, r24	; 0x14
    103a:	86 ec       	ldi	r24, 0xC6	; 198
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	97 8b       	std	Z+23, r25	; 0x17
    1040:	86 8b       	std	Z+22, r24	; 0x16
    1042:	11 8e       	std	Z+25, r1	; 0x19
    1044:	12 8e       	std	Z+26, r1	; 0x1a
    1046:	13 8e       	std	Z+27, r1	; 0x1b
    1048:	14 8e       	std	Z+28, r1	; 0x1c
    104a:	08 95       	ret

0000104c <__tablejump2__>:
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	05 90       	lpm	r0, Z+
    1052:	f4 91       	lpm	r31, Z
    1054:	e0 2d       	mov	r30, r0
    1056:	09 94       	ijmp

00001058 <__udivmodsi4>:
    1058:	a1 e2       	ldi	r26, 0x21	; 33
    105a:	1a 2e       	mov	r1, r26
    105c:	aa 1b       	sub	r26, r26
    105e:	bb 1b       	sub	r27, r27
    1060:	fd 01       	movw	r30, r26
    1062:	0d c0       	rjmp	.+26     	; 0x107e <__udivmodsi4_ep>

00001064 <__udivmodsi4_loop>:
    1064:	aa 1f       	adc	r26, r26
    1066:	bb 1f       	adc	r27, r27
    1068:	ee 1f       	adc	r30, r30
    106a:	ff 1f       	adc	r31, r31
    106c:	a2 17       	cp	r26, r18
    106e:	b3 07       	cpc	r27, r19
    1070:	e4 07       	cpc	r30, r20
    1072:	f5 07       	cpc	r31, r21
    1074:	20 f0       	brcs	.+8      	; 0x107e <__udivmodsi4_ep>
    1076:	a2 1b       	sub	r26, r18
    1078:	b3 0b       	sbc	r27, r19
    107a:	e4 0b       	sbc	r30, r20
    107c:	f5 0b       	sbc	r31, r21

0000107e <__udivmodsi4_ep>:
    107e:	66 1f       	adc	r22, r22
    1080:	77 1f       	adc	r23, r23
    1082:	88 1f       	adc	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	1a 94       	dec	r1
    1088:	69 f7       	brne	.-38     	; 0x1064 <__udivmodsi4_loop>
    108a:	60 95       	com	r22
    108c:	70 95       	com	r23
    108e:	80 95       	com	r24
    1090:	90 95       	com	r25
    1092:	9b 01       	movw	r18, r22
    1094:	ac 01       	movw	r20, r24
    1096:	bd 01       	movw	r22, r26
    1098:	cf 01       	movw	r24, r30
    109a:	08 95       	ret

0000109c <abort>:
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	f8 94       	cli
    10a2:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <_exit>

000010a6 <_exit>:
    10a6:	f8 94       	cli

000010a8 <__stop_program>:
    10a8:	ff cf       	rjmp	.-2      	; 0x10a8 <__stop_program>
